{
  "openapi": "3.0.2",
  "info": {
    "title": "WaniKani API v2",
    "version": "20170710",
    "contact": {
      "email": "hello@wanikani.com",
      "url": "https://wanikani.com/",
      "name": "WaniKani"
    },
    "description": "# Introduction\n\nWelcome to \"WaniKani: The API\"! You can use our API to access progress data\nfor a user's account and a ton general reference data for the subjects\nwithin WaniKani.\n\nThis version is built around a\n[REST](http://en.wikipedia.org/wiki/Representational_State_Transfer)ful\nstructure, with consistent, resource-oriented URLs. We support that\nstructure with standard HTTP features: HTTP verbs for all our endpoints to\nindicate different actions,\n[HTTP authentication headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods),\nand [HTTP response codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)\nto indicate both success and various errors. We've turned on cross-origin\nresource sharing to allow for secure client-side access. We respond to all\nrequests with JSON, making it easy to parse those responses into native\nobjects in a variety of languages. These should open up the API to any\nclient that supports these features and data structures.\n\nWe've got information on general usage, like authentication and error codes,\nin Getting Started. We make a few suggestions on how to optimize your usage\nof the API in Best Practices and clarify a few obscure topics under\nAdditional Information. Finally, details for all of the available resources\nand endpoints are under Resources.\n\nFeel free to reach out via email or through the\n[community](https://community.wanikani.com/) if you have any questions,\ncomments, or requests about the API.\n\n# Getting Started\n## Response Structure\nWe return JSON from all the API endpoints, even when an error occurs.\n\nThere are two main structures we return: resources and collections. Singular\nresource endpoints deliver information about a single entity, such as an\nassignment or subject. Collections contain summary data about a bunch of\nresources, and also include each of the resources.\n\nThere's a third type of structure that's less common: a report. Reports\nsummarize disparate or novel information into a single place, and don't\nfollow the same structure as collections.\n\nAll of the responses have a few shared, high-level attributes: `object`,\n`url`, `data_updated_at`, and `data`.\n\n### Object Types\nEvery successful API response contains an `object` attribute that tells you\nwhich kind of thing you're getting. As mentioned before, there are two\nobject types that return information on many different resources:\n\n- `collection`\n- `report`\n\nThe following are singular resources:\n\n- `assignment`\n- `kanji`\n- `level_progression`\n- `radical`\n- `reset`\n- `review_statistic`\n- `review`\n- `spaced_repetition_system`\n- `study_material`\n- `user`\n- `vocabulary`\n\n### Data Types\nWe stick to the common JSON data types in our responses: strings, integers,\nbooleans, arrays, and objects. We follow the Javascript standard for date\nformatting, returning them in [ISO 8601](https://xkcd.com/1179/) format,\nrounded to the microsecond.\n\n## Pagination\n### Collection Size\nBy default, the maximum number of resources returned for collection\nendpoints is 500. Some endpoints may return a different size — `reviews` and\n`subjects` have a maximum size of 1,000.\n\nAny collection response has the per-page count in the `pages.per_page`\nattribute. Those same responses have a `total_count` attribute, too. That is\na count of all resources available within the specified scope, **not**\nlimited to pagination.\n\n### Pagination in Action\nWhen there are more resources to return than the per-page limit, we use a\n[cursor-based pagination](https://www.sitepoint.com/paginating-real-time-data-cursor-based-pagination/)\nscheme to move through the pages of results. We use the `id` of a resource\nas the cursor.\n\nCollections have the following nested within a pages attribute:\n\n| Attribute | Data Type | Description |\n|-----------|-----------|-------------|\n| `next_url` | `null` or String | The URL of the next page of results. If there are no more results, the value is `null`. |\n| `previous_url` | `null` or String | The URL of the previous page of results. If there are no results at all or no previous page to go to, the value is `null`.\n| `per_page` | Integer | Maximum number of resources delivered for this collection. |\n\n> **_Pro tip:_**  the first page has no previous page, and the last page has\n> no next page.\n\nThe previous page of results can be requested by passing in the\n`page_before_id` parameter, with the value being the `id` you want to look\nbefore. Similar logic applies for the next page. Pass in the `page_after_id`\nparameter with with the `id` you want to look after.\n\nIf a cursor is outside the range of `id`s for the collection, an empty\nresult set is returned for `data`.\n\n#### Example\nLet’s say there are four resources with IDs of 1, 2, 3, 4.\n\n- If we make a request with `...?page_after_id=2`, then we'll get resources\n  with IDs 3 and 4.\n- If we make a request with `...?page_before_id=3`, then we'll get resources\n  with IDs 1 and 2.\n- If we make a request with `...?page_after_id=5`, then we'll get a\n  collection with an empty `data` field.\n\n## Filters\nCollections have optional filters to help narrow the results returned. The\nfilters are passed in as URL parameters, like\n`?parameter=value&other_parameter=value`.\n\nAny time we take a query parameter that's listed as an array data type, we\ntake that array as a comma delimited list of values. A single value is also\nvalid.\n\nSo, if a collection endpoint takes `subject_ids` as an argument for\nfiltering results, your requests might have the following formats:\n\n- A single-member `subject_ids` request: `...?subject_ids=8`\n- A multiple-member `subject_ids` request: `...?subject_ids=8,16,64`\n\n## Errors\nWe use standard HTTP response codes to indicate the status of the response.\nCodes in the 200s indicate success, 400s usually indicate a client\nconfiguration problem (that's you), while 500s indicate that something bad\nis happening on the server (that's us).\n\nThe codes are presented in the header of the response; some error responses\nwill also contain a body with the message specified below:\n\n| Code | Meaning | Message |\n|------|---------|---------|\n| 200 | Success | n/a |\n| 401 | Unauthorized | \"Unauthorized. Nice try.\" |\n| 403 | Forbidden | |\n| 404 | Not Found | |\n| 422 | Unprocessable Entity | Description of how the request was malformed. |\n| 429 | Too Many Requests | |\n| 500 | Internal Server Error | n/a |\n| 503 | Service Unavailable | n/a |\n\n## Rate Limit\nWe enforce the following rate limits to ensure decent response times for\neveryone using the API:\n\n| Throttle            | Value |\n|---------------------|-------|\n| Requests per minute | 60    |\n\nAn HTTP status code of `429` (Forbidden) and a body with the message\n`Rate Limit Exceeded` is returned if the limits are exceeded (shocking, we\nknow).\n\n## Revisions (aka Versioning)\nAny time we make 'breaking changes' to the API, we release a new,\ntimestamped revision of the API. Non-breaking changes don't trigger a new\nrevision, and those changes are available in all versions of the API.\n\n- A breaking change is anything that changes the existing structure of a\n  response, e.g. the renaming of a field in a resource.\n- Non-breaking changes are things like exposing new resource attributes or\n  adding whole new endpoints.\n\nRevisions are designated by timestamps in the format `YYYYMMDD`. We expect\nthe revision to be included in all API requests to the server in a header\nthat looks like the following: `Wanikani-Revision: 20170710`.\n\nSee the\n[list of revisions and changelogs](https://docs.api.wanikani.com/20170710/#)\nfor more details.\n\n> If you don't specify a revision, the API will default to the first\n> revision: [20170710](https://docs.api.wanikani.com/20170710).\n\n# Best Practices\nWe're always working to make the API as performant as possible, but there\nare a few things you can do to optimize your use of the data we deliver and\nspeed things up when you need to make new requests: cache data locally\nwhenever possible, make conditional requests to minimize network load, and\nmake use of the updated_after filter on a lot of the endpoints.\n\nWhen you're building applications or services that other people will use,\nthere's also some work to be done to respect the access to content granted\nby a subscription to WaniKani (per our terms and generally being a good\ncitizen).\n\n## Caching\nMost of the data on WaniKani doesn't change that often, so long-lived caches\nor more permanent stores that are periodically updated can eliminate a lot\nof time-consuming requests and help with offline functionality, if that's\nsomething you're after.\n\nHere are a few recommendations that might influence what you cache and how\nlong you keep it around:\n\n- Cache [subjects](#/Subjects) as aggressively as possible. They aren't very\n  frequently updated, and you'll probably need to access them frequently.\n  They're the object that ties together assignments, review statistics, and\n  study materials.\n- Reviews and resets are never changed once recorded, but reviews are\n  created frequently. You can put these two in long-term storage if you need\n  them.\n- Assignments, review statistics, and study materials have moderate levels\n  of updates. When a user levels up or passes a a subject, there might be a\n  small flurry of activity with new assignments being created and existing\n  records being updated. As an assignment gets further and further along in\n  the SRS stages, those updates will become less and less frequent.\n- The summary report changes every hour. Caching the results of this request\n  might help with offline activity, but the data changes, well, every hour.\n- The user endpoint isn't updated a ton, but when it does, it's going to be\n  pretty important to capture.\n\nDo take note any of the above recommendations may become outdated, but we\nwill try out best to communicate these changes.\n\nCaching is always tricky business. When do you expire it? How do you refresh\nit? Who's in charge of it?\n\nWe've done a couple things to try and help with a couple of the problems\naround caching. The first is to support conditional requests, which lets us\nquickly tell you that a record hasn't changed since you got it last.\nThe second is to give you tools to get only the updated or new records after\nany point in time, letting you easily refresh your local data caches and\nstores without having to parse all the records.\n\n## Conditional Requests\nWe accept the `If-None-Match` and `If-Modified-Since` headers for every\nendpoint. If the response body hasn't changed since the last request, then a\nHTTP status code `304` (Not Modified) and an empty response body is\nreturned. The advantage to using these headers is a faster response time\nsince we don't have to generate a full response; we assume you still have\nthe unmodified data cached.\n\nEach response includes the `ETag` and `Last-Modified` headers that are used\nto populate `If-None-Match` and `If-Modified-Since`, respectively. These\nvalues can be used in future requests at the matching endpoint.\n\nIf both `If-None-Match` and `If-Modified-Since` are passed in, then\n`If-None-Match` takes precedence.\n\n### If-Modified-Since\nThe `If-Modified-Since` request header takes in a `Last-Modified` value from\nthe last request — or any datetime — in the following format:\n\n`If-Modified-Since: <day-name>, <day> <month> <year>\n<hour>:<minute>:<second> GMT`\n\nWhere:\n\n- `<day-name>` — One of \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", or \"Sun\"\n  (case-sensitive).\n- `<day>` — 2 digit day number, e.g. \"04\" or \"23\".\n- `<month>` — One of \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\",\n  \"Sep\", \"Oct\", \"Nov\", \"Dec\" (case sensitive).\n- `<year>` — 4 digit year number, e.g. \"1990\" or \"2016\".\n- `<hour>` — 2 digit hour number, e.g. \"09\" or \"23\".\n- `<minute>` — 2 digit minute number, e.g. \"04\" or \"59\".\n- `<second>` — 2 digit second number, e.g. \"04\" or \"59\".\n- `GMT` — Greenwich Mean Time. HTTP dates are always expressed in GMT, never\n  in local time.\n\nExample: `If-Modified-Since: Fri, 11 Nov 2011 11:11:11 GMT`\n\nThe generally-excellent\n[MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since)\nhave more information on the `If-Modified-Since` header.\n\n### If-None-Match\nThe `If-None-Match` request header takes in an `ETag` value from the last\nrequest's response header:\n\n`If-None-Match: <etag_here>`\n\nThe [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match)\nhave more information on the `If-None-Match` header, too.\n\n## Leveraging the `updated_after` Filter\nAll of the collection endpoints support an `updated_after` filter. As you'd\nguess, that's going to only return records that have been updated after the\ntimestamp you pass to us.\n\n### Example/Scenario/Not a Fable\nHow does that help with performance and caching? By only returning the\nrecords you need.\n\nLet's say you're building a [statistics site](https://www.wkstats.com/). You\nneed to know about all the subjects plus get all of a user's assignments,\nreview statistics, reviews, resets, and level progressions to figure out how\nthey've done in the past and do some guesswork on how they might do in the\nfuture.\n\nFocusing in on the assignments, let's say you decide to re-calculate a\nuser's progress every time they log in to use your site. Without the\n`updated_after` filter, you'd have to grab all their assignments, since\nthere'd be no way to tell which ones had changed until after you retrieved\nthem all. For high level users, that could be 18 sequential requests! Once\nyou've made them sit through that progress bar, you'd need to parse all the\nresults and compare to them what you've stored locally.\n\nWith the `updated_after` filter, though, you can ask for only the records\nthat have changed since the last time that user logged in, getting a\nsmaller, faster response full of records you know you have to update or add\ninternally. Even high activity users are only going to touch a small portion\nof their assignments at a time. We can generate that list of records far\nmore rapidly, it'll be a smaller payload, and you probably won't need to\npage through results to get everything that you need.\n\n## Respecting Subscription Restrictions\nWaniKani has\n[paid subscriptions](https://www.wanikani.com/account/subscription). That\nmay come as a surprise in 2020, but it's true. Those subscriptions grant\naccess to all the content past level three and let people to do lessons and\nreviews for that content.\n\nWhen the API is used for your own uses (populating spreadsheets, backing up\nprogress, etc.), those access restrictions don't have that much of an\nimpact. Most of the data delivered by the API belongs to you: assignments,\nstudy materials, review statistics, and those bits about how you progress\nthrough WaniKani. The only data that isn't yours is the content in subjects.\nAll those mnemonics, hints, and relationships have been painstakingly\ncrafted by the WaniKani staff to make learning kanji faster and better. That\ncontent is covered by pertinent copyright laws — which also means that fair\nuse allows you to use it to learn on your own.\n\nOnce you start building tools that can be used by other people, things\nchange, though. First, you can't use the content to build anything that's\nfor profit. Second, you need to respect the limitations put in place by the\nsubscriptions. Both of those requirements are per our\n[terms](https://www.wanikani.com/terms). So, how do you do meet those\nrequirements?\n\nThe user endpoint has a `subscription` attribute. That should have\neverything you need.\n\n- `max_level_granted` defines the maximum level of content that's available\n  to the user. It has two possible values: 3 and 60. The user shouldn't be\n  able to access subjects above those levels. Lessons and reviews above\n  those levels shouldn't be available at all and will be rejected if you try\n  and submit them to us.\n- `active` is a boolean that tells you if the person has an active\n  subscription.\n- `type` defines the kind of subscription, and works closely with\n  `period_ends_at`. There are four values:\n  - `free` subscriptions aren't really subscriptions, but can represent\n    people who've never subscribed or have an inactive subscription. There's\n    no `period_ends_at` for free subscriptions.\n  - `recurring` subscriptions renew on a periodic basis. `period_ends_at`\n    tells you when the subscription renews or expires. Since we give people\n    access until the end of their subscription period even if they cancel,\n    you can generally not check their subscription status until that time.\n  - `lifetime` means the user can access WaniKani forever. `period_ends_at`\n    is null, mainly because `∞` is hard for computers to get. It's possible\n    that a lifetime user will ask for a refund or have payment difficulties,\n    so scheduled checks on the subscription status are still needed.\n  - `unknown` means the user subscription state isn't exactly known. This is\n    a weird state on WaniKani, should be treated as free, and reported to\n    the WaniKani developers.\n\nYour application can use `max_level_granted` as a first, easy line of\ndefense. That restricts content access based on their subscription, and is\nmost of what you need to do. The `active`, `type`, and `period_ends_at`\nfields are all there to let you build more robust solutions. Those help you\nfigure out when your application needs to check up on subscription status\n(if ever) or do things like expire access if the user hasn't connected in a\nwhile.\n\n# Additional Information\n## Spaced Repitition System\nOur [spaced repetition systems](#/Spaced%20Repetition%20Systems) determine\nhow subjects progress from being unavailable to users (locked) through\ncomplete memorization (burned). The\n[knowledge guide](https://knowledge.wanikani.com/wanikani/srs-stages/) has\nsome good general information about how we use SRS in WaniKani.\n\nA single spaced repetition system consists of N number of sequential stages.\nEach stage describes its position in the sequence as well as the time\ninterval that’s used to determine when the subject will appear next in\nreviews.\n\nEach system has the following common characteristics.\n\n| Special stage name | Stage position/number | Description |\n|--------------------|-----------------------|-------------|\n| Unlocking stage | 0 | This is the initial stage for an assignment; it generally indicates the subject will appear in lessons. |\n| Starting stage | 1 | The minimum stage for a subject to appear in reviews. |\n| Passing stage | Value from the starting stage position up to the burning stage position\t| Reaching this milestone counts towards level progression and the unlocking of additional subjects. |\n| Burning stage | N | This is the stage when the subject is complete, exits out of reviews and is no longer tested. |\n\nAs mentioned before, we use the SRS stages to calculate the time until the\nnext review (the 'space' in the 'spaced-repetition').\n\n- If the review goes well and there are no wrong answers, we move the\n  assignment up to the next SRS stage. We make the assignment available\n  'interval' hours from now, at the top of the hour. For example: given an\n  assignment at stage `1`, when we submit a correct answer at 3:31pm, the\n  assignment would move to SRS stage `2` and become available for another\n  review at 11:00pm.\n- If there are wrong answers, we decrease the SRS stage based on the number\n  of times it was wrong, and then again make it available according to the\n  interval for that SRS stage.\n\n## User Resets\nUsers have the option to reset their account to a target level at or below\ntheir current level.\n\nResets will show up in a variety of places. Explicit records will show up\nunder [resets](#/Resets). They'll get a fresh\n[level progression](#/Level%20Progressions) for the target level of the\nreset, and the level progression for the level they abandoned gets an\n`abandoned_at` timestamp. Finally, the `assignments` and `review_statistics`\nfor the affected levels will get set back to their default state, waiting to\nbe unlocked or started, depending on the levels.\n"
  },
  "servers": [
    {
      "url": "https://api.wanikani.com/v2"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "Assignments",
      "description": "Assignments contain information about a user's progress on a particular\nsubject, including their current state and timestamps for various progress\nmilestones. Assignments are created when a user has passed all the\ncomponents of the given subject and the assignment is at or below their\ncurrent level for the first time.\n"
    },
    {
      "name": "Level Progressions",
      "description": "Level progressions contain information about a user's progress through the\nWaniKani levels.\n\nA level progression is created when a user has met the prerequisites for\nleveling up, which are:\n\n- Reach a 90% passing rate on assignments for a user's current level\n  with a `subject_type` of `kanji`. Passed assignments have `data.passed`\n  equal to `true` and a `data.passed_at` that's in the past.\n- Have access to the level. Under [/user](#/User/user), the `data.level`\n  must be less than or equal to `data.subscription.max_level_granted`.\n"
    },
    {
      "name": "Resets",
      "description": "Users can reset their progress back to any level at or below their current\nlevel. When they reset to a particular level, all of the `assignments` and\n`review_statistics` at that level or higher are set back to their default\nstate.\n\nResets contain information about when those resets happen, the starting\nlevel, and the target level.\n"
    },
    {
      "name": "Reviews",
      "description": "Reviews log all the correct and incorrect answers provided through the\n'Reviews' section of WaniKani. Review records are created when a user\nanswers all the parts of a subject correctly once; some subjects have both\nmeaning or reading parts, and some only have one or the other. Note that\nreviews are not created for the quizzes in lessons.\n"
    },
    {
      "name": "Review Statistics",
      "description": "Review statistics summarize the activity recorded in [reviews](#/Reviews).\nThey contain sum the number of correct and incorrect answers for both\nmeaning and reading. They track current and maximum streaks of correct\nanswers. They store the overall percentage of correct answers versus total\nanswers.\n\nA review statistic is created when the user has done their first review on\nthe related subject.\n"
    },
    {
      "name": "Spaced Repetition Systems",
      "description": "Available spaced repetition systems used for calculating `srs_stage`\nchanges to [Assignments](#/Assignments) and [Reviews](#/Reviews). Has\nrelationship with [Subjects](#/Subjects)\n"
    },
    {
      "name": "Study Materials",
      "description": "Study materials store user-specific notes and synonyms for a given\nsubject. The records are created as soon as the user enters any study\ninformation.\n"
    },
    {
      "name": "Subjects",
      "description": "Subjects are the radicals, kanji, and vocabulary that are learned through\nlessons and reviews. They contain basic dictionary information, such as\nmeanings and/or readings, and information about their relationship to\nother items with WaniKani, like their level.\n"
    },
    {
      "name": "Summary",
      "description": "The summary report contains currently available lessons and reviews and\nthe reviews that will become available in the next 24 hours, grouped by\nthe hour.\n"
    },
    {
      "name": "User",
      "description": "The user summary returns basic information for the user making the API\nrequest, identified by their API key.\n"
    },
    {
      "name": "Voice Actors",
      "description": "Available voice actors used for vocabulary reading pronunciation audio.\n"
    }
  ],
  "paths": {
    "/assignments": {
      "get": {
        "description": "Returns a collection of all assignments, ordered by ascending\n`created_at`, 500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only assignments available at or after this time are returned.\n",
            "in": "query",
            "name": "available_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Only assignments available at or before this time are returned.\n",
            "in": "query",
            "name": "available_before",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "When set to `true`, returns assignments that have a value in\n`data.burned_at`. Returns assignments with a `null` `data.burned_at`\nif `false`.\n",
            "in": "query",
            "name": "burned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Return assignments with a matching value in the `hidden` attribute\n",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only assignments where `data.id` matches one of the array values are\nreturned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Returns assignments which are immediately available for lessons\n",
            "in": "query",
            "name": "immediately_available_for_lessons",
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Returns assignments which are immediately available for review\n",
            "in": "query",
            "name": "immediately_available_for_review",
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Returns assignments which are in the review state",
            "in": "query",
            "name": "in_review",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only assignments where the associated subject level matches one of\nthe array values are returned.\n",
            "explode": false,
            "in": "query",
            "name": "levels",
            "schema": {
              "items": {
                "format": "int32",
                "maximum": 60,
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only assignments where `data.srs_stage` matches one of the array\nvalues are returned.\n",
            "explode": false,
            "in": "query",
            "name": "srs_stages",
            "schema": {
              "items": {
                "format": "int32",
                "maximum": 9,
                "minimum": 0,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "When set to `true`, returns assignments that have a value in\n`data.started_at`. Returns assignments with a `null`\n`data.started_at` if `false`.\n",
            "in": "query",
            "name": "started",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only assignments where `data.subject_id` matches one of the array\nvalues are returned.\n",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only assignments where `data.subject_type` matches one of the array\nvalues are returned.\n",
            "explode": false,
            "in": "query",
            "name": "subject_types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "When set to `true`, returns assignments that have a value in\n`data.unlocked_at`. Returns assignments with a `null`\n`data.unlocked_at` if `false`.\n",
            "in": "query",
            "name": "unlocked",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only assignments updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignmentCollection"
                }
              }
            },
            "description": "Successfully returned an assignment collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/assignments/{id}": {
      "get": {
        "description": "Retrieves a specific assignment by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignmentResource"
                }
              }
            },
            "description": "Successfully returned an assignment resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/assignments/{id}/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ],
      "put": {
        "description": "Mark the assignment as started, moving the assignment from the lessons\nqueue to the review queue. Returns the updated assignment.\n\nAPI token used must have been created with the `assignments:start`\npermission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assignmentStart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignmentResource"
                }
              }
            },
            "description": "Successfully started an assignment",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      }
    },
    "/level_progressions": {
      "get": {
        "description": "Returns a collection of all level progressions, ordered by ascending\n`created_at`, 500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/levelProgressionCollection"
                }
              }
            },
            "description": "Successfully returned a level progression collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Level Progressions"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/level_progressions/{id}": {
      "get": {
        "description": "Retrieves a specific level progression by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/levelProgressionResource"
                }
              }
            },
            "description": "Successfully returned a level progression resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Level Progressions"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the level progression.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/resets": {
      "get": {
        "description": "Returns a collection of all resets, ordered by ascending `created_at`,\n500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only resets where `data.id` matches one of the array values are\nreturned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only resets updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetCollection"
                }
              }
            },
            "description": "Successfully returned a reset collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Resets"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/resets/{id}": {
      "get": {
        "description": "Retrieves a specific reset by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetResource"
                }
              }
            },
            "description": "Successfully returned a reset resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Resets"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the reset.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/review_statistics": {
      "get": {
        "description": "Returns a collection of all review statistics, ordered by ascending\n`created_at`, 500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Return review statistics with a matching value in the `hidden`\nattribute\n",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only review statistics where `data.id` matches one of the array\nvalues are returned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Return review statistics where the `percentage_correct` is greater\nthan the value.\n",
            "in": "query",
            "name": "precentages_greater_than",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return review statistics where the `percentage_correct` is less than\nthe value.\n",
            "in": "query",
            "name": "precentages_less_than",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Only review statistics where `data.subject_id` matches one of the\narray values are returned.\n",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only review statistics where `data.subject_type` matches one of the\narray values are returned. Valid values are: `radical`, `kanji`, or\n`vocabulary`.\n",
            "explode": false,
            "in": "query",
            "name": "subject_types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "Only review statistics updated after this time are returned.\n",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewStatisticCollection"
                }
              }
            },
            "description": "Successfully returned a review statistic collection.",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Review Statistics"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/review_statistics/{id}": {
      "get": {
        "description": "Retrieves a specific review statistic by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewStatisticResource"
                }
              }
            },
            "description": "Successfully returned a review statistic resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/reviews": {
      "get": {
        "description": "Returns a collection of all reviews, ordered by ascending `created_at`,\n1000 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only reviews where `data.assignment_id` matches one of the array\nvalues are returned.\n",
            "explode": false,
            "in": "query",
            "name": "assignment_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only reviews where `data.id` matches one of the array values are\nreturned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only reviews where `data.subject_id` matches one of the array values\nare returned.\n",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only reviews updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewCollection"
                }
              }
            },
            "description": "Successfully returned a review collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ],
      "post": {
        "description": "Creates a review for a specific `assignment_id`. Using the related\n`subject_id` is also a valid alternative to using `assignment_id`.\n\nSome criteria must be met in order for a review to be created:\n`available_at` must be not null and in the past.\n\nWhen a review is registered, the associated `assignment` and\n`review_statistic` are both updated. These are returned in the response\nbody under `resources_updated`.\n\nAPI token used must have been created with the `reviews:create`\npermission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reviewCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewCreateResponse"
                }
              }
            },
            "description": "Successfully created a review."
          }
        },
        "tags": [
          "Reviews"
        ]
      }
    },
    "/reviews/{id}": {
      "get": {
        "description": "Retrieves a specific review by its id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewResource"
                }
              }
            },
            "description": "Successfully returned a review resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/spaced_repetition_systems": {
      "get": {
        "description": "Returns a collection of all spaced repetition systems, ordered by\nascending `id`, 500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only spaced repetition systems where `data.id` matches one of the\narray values are returned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only spaced repetition systems updated after this time are returned.\n",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spacedRepetitionSystemCollection"
                }
              }
            },
            "description": "Successfully returned a spaced repetition system collection\n",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Spaced Repetition Systems"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/spaced_repetition_systems/{id}": {
      "get": {
        "description": "Retrieves a specific spaced_repetition_system by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spacedRepetitionSystemResource"
                }
              }
            },
            "description": "Successfully returned a spaced repetition system resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Spaced Repetition Systems"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the spaced repetition system.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/study_materials": {
      "get": {
        "description": "Returns a collection of all study material, ordered by ascending\n`created_at`, 500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Return study materials with a matching value in the `hidden`\nattribute.\n",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only study material records where `data.id` matches one of the array\nvalues are returned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only study material records where `data.subject_id` matches one of\nthe array values are returned.\n",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only study material records where `data.subject_type` matches one of\nthe array values are returned. Valid values are: `radical`, `kanji`,\nor `vocabulary`.\n",
            "explode": false,
            "in": "query",
            "name": "subject_types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "Only study material records updated after this time are returned.\n",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialCollection"
                }
              }
            },
            "description": "Successfully returned a study material collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Study Materials"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ],
      "post": {
        "description": "Creates a study material for a specific `subject_id`.\n\nThe owner of the api key can only create one study material per\n`subject_id`.\n\nAPI token used must have been created with the `study_materials:create`\npermission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/studyMaterialCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                }
              }
            },
            "description": "Successfully created a study material resource"
          }
        },
        "tags": [
          "Study Materials"
        ]
      }
    },
    "/study_materials/{id}": {
      "get": {
        "description": "Retrieves a specific study material by its id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                }
              }
            },
            "description": "Successfully returned a study material resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Study Materials"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the study material.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ],
      "put": {
        "description": "Updates a study material for a specific `id`.\n\nAPI token used must have been created with the `study_materials:update`\npermission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/studyMaterialUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                }
              }
            },
            "description": "Successfully created a study material resource"
          }
        },
        "tags": [
          "Study Materials"
        ]
      }
    },
    "/subjects": {
      "get": {
        "description": "Returns a collection of all subjects, ordered by ascending `created_at`,\n1000 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only subjects where `data.id` matches one of the array values are\nreturned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects of the specified types.",
            "explode": false,
            "in": "query",
            "name": "types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects of the specified slug.",
            "explode": false,
            "in": "query",
            "name": "slugs",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects at the specified levels.",
            "explode": false,
            "in": "query",
            "name": "levels",
            "schema": {
              "items": {
                "format": "int32",
                "maximum": 60,
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects which are or are not hidden from the user-facing\napplication.\n",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only subjects updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subjectCollection"
                }
              }
            },
            "description": "Successfully returned a subject collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Subjects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/subjects/{id}": {
      "get": {
        "description": "Retrieves a specific subject by its `id`. The structure of the response\ndepends on the subject type.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subjectResource"
                }
              }
            },
            "description": "Successfully returned a subject resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Subjects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the subject.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/summary": {
      "get": {
        "description": "Retrieves a summary report.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summaryReport"
                }
              }
            },
            "description": "Successfully returned a summary report",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Summary"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/user": {
      "get": {
        "description": "Returns a summary of user information.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userReport"
                }
              }
            },
            "description": "Successfully returned a user report",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ],
      "put": {
        "description": "Returns an updated summary of user information.\n\nAPI token used must have been created with the `user:update` permission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userUpdate"
              }
            }
          },
          "description": "Only the values under `preferences` are allowed to be updated.\n"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userReport"
                }
              }
            },
            "description": "Successfully updated user preferences"
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/voice_actors": {
      "get": {
        "description": "Returns a collection of all voice actors, ordered by ascending\n`created_at`, 500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only voice actors where `data.id` matches one of the array values\nare returned.\n",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only voice actors updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/voiceActorCollection"
                }
              }
            },
            "description": "Successfully returned a voice actor collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Voice Actors"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/voice_actors{id}": {
      "get": {
        "description": "Retrieves a specific voice actor by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/voiceActorResource"
                }
              }
            },
            "description": "Successfully returned a voice actor resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Voice Actors"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the voice actor.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    }
  },
  "components": {
    "headers": {
      "lastModified": {
        "description": "Date and time resource was last modified",
        "schema": {
          "type": "string"
        }
      }
    },
    "parameters": {
      "ifModifiedSince": {
        "in": "header",
        "name": "If-Modified-Since",
        "schema": {
          "type": "string"
        }
      },
      "pageAfterId": {
        "in": "query",
        "name": "page_after_id",
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "pageBeforeId": {
        "in": "query",
        "name": "page_before_id",
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "wanikaniRevision": {
        "in": "header",
        "name": "Wanikani-Revision",
        "required": true,
        "schema": {
          "enum": [
            20170710
          ],
          "type": "string"
        }
      }
    },
    "responses": {
      "401Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Unauthorized to make this request. You probably didn't send a valid API\nkey\n"
      },
      "403Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Not allowed to make this request. Your API token doesn't have the\ncorrect permissions.\n"
      },
      "404Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Our old friend 404. The resource you requested doesn't exist"
      },
      "422Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Something about your request was malformed."
      },
      "429Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "You've made too many requests in the past minute. You're allowed up to\n60\n"
      },
      "500Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Something broke on the server side. It's our fault, not yours. Try\nagain, and if it keeps happening, let us know!\n"
      },
      "503Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "The API is down at the moment. Try again later"
      },
      "assignmentResource": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/assignmentResource"
            }
          }
        },
        "description": "Successfully returned an assignment resource",
        "headers": {
          "Last-Modified": {
            "$ref": "#/components/headers/lastModified"
          }
        }
      }
    },
    "schemas": {
      "assignment": {
        "properties": {
          "available_at": {
            "description": "Timestamp when the related subject will be available in the user's\nreview queue.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "burned_at": {
            "description": "Timestamp when the user reaches SRS stage `9` the first time.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the assignment was created.",
            "format": "date-time",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the associated subject has been hidden, preventing it\nfrom appearing in lessons or reviews.\n",
            "type": "boolean"
          },
          "passed_at": {
            "description": "Timestamp when the user reaches SRS stage `5` for the first time.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "resurrected_at": {
            "description": "Timestamp when the subject is resurrected and placed back in the\nuser's review queue.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "srs_stage": {
            "description": "The current SRS stage interval. The interval range is determined by\nthe related subject's spaced repetition system.\n",
            "format": "int32",
            "type": "integer"
          },
          "started_at": {
            "description": "Timestamp when the user completes the lesson for the related\nsubject.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "subjectType": {
            "$ref": "#/components/schemas/subjectType"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "unlocked_at": {
            "description": "The timestamp when the related subject has its prerequisites\nsatisfied and is made available in lessons.\n\nPrerequisites are:\n\n- The subject components have reached SRS stage `5` once (they have\n  been \"passed\").\n- The user's level is equal to or greater than the level of the\n  assignment’s subject.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "assignmentCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/assignmentResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "assignmentResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/assignment"
              }
            }
          }
        ]
      },
      "assignmentStart": {
        "properties": {
          "started_at": {
            "description": "- If not set, `started_at` will default to the time the request is\n  made.\n- `started_at` must be greater than or equal to `unlocked_at`.\n",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "collection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/report"
          },
          {
            "properties": {
              "pages": {
                "properties": {
                  "next_url": {
                    "format": "url",
                    "nullable": true,
                    "type": "string"
                  },
                  "per_page": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "previous_url": {
                    "format": "url",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "total_count": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        ]
      },
      "errorResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "error": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "levelProgression": {
        "properties": {
          "abandoned_at": {
            "description": "Timestamp when the user abandons the level. This is primary used\nwhen the user initiates a reset.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "completed_at": {
            "description": "Timestamp when the user burns 100% of the assignments belonging to\nthe associated subject's level.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the level progression is created",
            "format": "date-time",
            "type": "string"
          },
          "level": {
            "description": "The level of the progression, with possible values from `1` to `60`.\n",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          },
          "passed_at": {
            "description": "Timestamp when the user passes at least 90% of the assignments with\na type of `kanji` belonging to the associated subject's level.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "started_at": {
            "description": "Timestamp when the user starts their first lesson of a subject\nbelonging to the level.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "unlocked_at": {
            "description": "Timestamp when the user can access lessons and reviews for the\n`level`.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "levelProgressionCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/levelProgressionResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "levelProgressionResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/levelProgression"
              }
            }
          }
        ]
      },
      "objectType": {
        "description": "Describes the type of object that is being returned",
        "enum": [
          "collection",
          "report",
          "assignment",
          "kanji",
          "level_progression",
          "radical",
          "reset",
          "review_statistic",
          "review",
          "spaced_repetition_system",
          "study_material",
          "user",
          "vocabulary"
        ],
        "type": "string"
      },
      "report": {
        "properties": {
          "data_updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "object": {
            "$ref": "#/components/schemas/objectType"
          },
          "url": {
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "reset": {
        "properties": {
          "confirmed_at": {
            "description": "Timestamp when the user confirmed the reset.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the reset was created.",
            "format": "date-time",
            "type": "string"
          },
          "original_level": {
            "description": "The user's level before the reset, from `1` to `60`.",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          },
          "target_level": {
            "description": "The user's level after the reset, from `1` to `60`. It must be less\nthan or equal to `original_level`.\n",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "resetCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/resetResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "resetResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/reset"
              }
            }
          }
        ]
      },
      "resource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/report"
          },
          {
            "properties": {
              "id": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        ]
      },
      "review": {
        "properties": {
          "assignment_id": {
            "description": "Unique identifier of the associated assignment.",
            "format": "int32",
            "type": "integer"
          },
          "created_at": {
            "description": "Timestamp when the review was created.",
            "format": "date-time",
            "type": "string"
          },
          "ending_srs_stage": {
            "description": "The SRS stage interval calculated from the number of correct and\nincorrect answers, with valid values ranging from `1` to `9`.\n",
            "format": "int32",
            "maximum": 9,
            "minimum": 1,
            "type": "integer"
          },
          "incorrect_meaning_answers": {
            "description": "The number of times the user has answered the meaning incorrectly.\n",
            "format": "int32",
            "type": "integer"
          },
          "incorrect_reading_answers": {
            "description": "The number of times the user has answered the reading incorrectly.\n",
            "format": "int32",
            "type": "integer"
          },
          "spaced_repetition_system_id": {
            "description": "Unique identifier of the associated spaced_repetition_system.\n",
            "format": "int32",
            "type": "integer"
          },
          "starting_srs_stage": {
            "description": "The starting SRS stage interval, with valid values ranging from `1`\nto `8`.\n",
            "format": "int32",
            "maximum": 8,
            "minimum": 1,
            "type": "integer"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "reviewCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/reviewResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "reviewCreateRequest": {
        "properties": {
          "review": {
            "properties": {
              "assignment_id": {
                "description": "Unique identifier of the assignment. This or `subject_id` must\nbe set.\n",
                "format": "int32",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp when the review was completed. Defaults to the time of\nthe request if omitted from the request body. Must be in the\npast, but after `assignment.available_at`.\n",
                "format": "date-time",
                "type": "string"
              },
              "incorrect_meaning_answers": {
                "description": "Must be zero or a positive number. This is the number of times\nthe meaning was answered **incorrectly**.\n",
                "format": "int32",
                "type": "integer"
              },
              "incorrect_reading_answers": {
                "description": "Must be zero or a positive number. This is the number of times\nthe reading was answered **incorrectly**.\nNote that subjects with a type of `radical` do not quiz on\nreadings. Thus, set this value to 0.\n",
                "format": "int32",
                "type": "integer"
              },
              "subject_id": {
                "description": "Unique identifier of the subject. This or `assignment_id` must\nbe set.\n",
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "assignment_id",
              "subject_id",
              "incorrect_meaning_answers",
              "incorrect_reading_answers"
            ],
            "type": "object"
          }
        },
        "required": [
          "review"
        ],
        "type": "object"
      },
      "reviewCreateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reviewResource"
          },
          {
            "properties": {
              "resources_updated": {
                "properties": {
                  "assignment": {
                    "$ref": "#/components/schemas/assignmentResource"
                  },
                  "review_statistic": {
                    "$ref": "#/components/schemas/reviewStatisticResource"
                  }
                },
                "type": "object"
              }
            }
          }
        ]
      },
      "reviewResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/review"
              }
            }
          }
        ]
      },
      "reviewStatistic": {
        "properties": {
          "created_at": {
            "description": "Timestamp when the review statistic was created.",
            "format": "date-time",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the associated subject has been hidden, preventing it\nfrom appearing in lessons or reviews.\n",
            "type": "boolean"
          },
          "meaning_correct": {
            "description": "Total number of correct answers submitted for the meaning of the\nassociated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "meaning_current_streak": {
            "description": "The current, uninterrupted series of correct answers given for the\nmeaning of the associated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "meaning_incorrect": {
            "description": "Total number of incorrect answers submitted for the meaning of the\nassociated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "meaning_max_streak": {
            "description": "The longest, uninterrupted series of correct answers ever given for\nthe meaning of the associated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "percentage_correct": {
            "description": "The overall correct answer rate by the user for the subject,\nincluding both meaning and reading.\n",
            "format": "int32",
            "type": "integer"
          },
          "reading_correct": {
            "description": "Total number of correct answers submitted for the reading of the\nassociated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "reading_current_streak": {
            "description": "The current, uninterrupted series of correct answers given for the\nreading of the associated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "reading_incorrect": {
            "description": "Total number of incorrect answers submitted for the reading of the\nassociated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "reading_max_streak": {
            "description": "The longest, uninterrupted series of correct answers ever given for\nthe reading of the associated subject.\n",
            "format": "int32",
            "type": "integer"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "subject_type": {
            "$ref": "#/components/schemas/subjectType"
          }
        },
        "type": "object"
      },
      "reviewStatisticCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/reviewStatisticResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "reviewStatisticResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/reviewStatistic"
              }
            }
          }
        ]
      },
      "spacedRepetitionSystem": {
        "properties": {
          "burning_stage_position": {
            "description": "`position` of the burning stage.\n",
            "format": "int32",
            "type": "integer"
          },
          "created_at": {
            "description": "Timestamp when the spaced_repetition_system was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Details about the spaced repetition system.",
            "type": "string"
          },
          "name": {
            "description": "The name of the spaced repetition system.",
            "type": "string"
          },
          "passing_stage_position": {
            "description": "`position` of the passing stage.\n",
            "format": "int32",
            "type": "integer"
          },
          "stages": {
            "properties": {
              "interval": {
                "description": "The length of time added to the time of review registration,\nadjusted to the beginning of the hour.\n",
                "format": "int32",
                "nullable": true,
                "type": "integer"
              },
              "interval_unit": {
                "description": "Unit of time. Can be the following: milliseconds, seconds,\nminutes, hours, days, and weeks.\n",
                "enum": [
                  "milliseconds",
                  "seconds",
                  "minutes",
                  "hours",
                  "days",
                  "weeks"
                ],
                "nullable": true,
                "type": "string"
              },
              "position": {
                "description": "The position of the stage within the continuous order.\n",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "starting_stage_position": {
            "description": "position of the starting stage.\n",
            "format": "int32",
            "type": "integer"
          },
          "unlocking_stage_position": {
            "description": "position of the unlocking stage.\n",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "spacedRepetitionSystemCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/spacedRepetitionSystemResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "spacedRepetitionSystemResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/spacedRepetitionSystem"
              }
            }
          }
        ]
      },
      "studyMaterial": {
        "properties": {
          "created_at": {
            "description": "Timestamp when the study material was created.",
            "format": "date-time",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the associated subject has been hidden, preventing it\nfrom appearing in lessons or reviews.\n",
            "type": "boolean"
          },
          "meaning_note": {
            "description": "Free form note related to the meaning(s) of the associated subject.\n",
            "nullable": true,
            "type": "string"
          },
          "meaning_synonyms": {
            "description": "Synonyms for the meaning of the subject. These are used as\nadditional correct answers during reviews.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reading_note": {
            "description": "Free form note related to the reading(s) of the associated subject.\n",
            "nullable": true,
            "type": "string"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "subject_type": {
            "$ref": "#/components/schemas/subjectType"
          }
        },
        "type": "object"
      },
      "studyMaterialCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "studyMaterialCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/studyMaterialUpdate"
          },
          {
            "properties": {
              "study_material": {
                "properties": {
                  "subject_id": {
                    "description": "Unique identifier of the subject.",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "subject_id"
                ]
              }
            }
          }
        ]
      },
      "studyMaterialResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/studyMaterial"
              }
            }
          }
        ]
      },
      "studyMaterialUpdate": {
        "properties": {
          "study_material": {
            "properties": {
              "meaning_note": {
                "description": "Meaning notes specific for the subject.",
                "type": "string"
              },
              "meaning_synonyms": {
                "description": "Meaning synonyms for the subject.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "reading_note": {
                "description": "Reading notes specific for the subject.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "subjectAuxiliaryMeaning": {
        "properties": {
          "meaning": {
            "description": "A singular subject meaning.",
            "type": "string"
          },
          "type": {
            "description": "Either `whitelist` or `blacklist`. When evaluating user input,\nwhitelisted meanings are used to match for correctness. Blacklisted\nmeanings are used to match for incorrectness.\n",
            "enum": [
              "whitelist",
              "blacklist"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/subjectResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "subjectCommon": {
        "properties": {
          "auxiliary_meanings": {
            "description": "Collection of auxiliary meanings.",
            "items": {
              "$ref": "#/components/schemas/subjectAuxiliaryMeaning"
            },
            "type": "array"
          },
          "characters": {
            "description": "The UTF-8 characters for the subject, including kanji and hiragana.\n",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the subject was created.",
            "format": "date-time",
            "type": "string"
          },
          "document_url": {
            "description": "A URL pointing to the page on wanikani.com that provides detailed\ninformation about this subject.\n",
            "format": "url",
            "type": "string"
          },
          "hidden_at": {
            "description": "Timestamp when the subject was hidden, indicating associated\nassignments will no longer appear in lessons or reviews and that the\nsubject page is no longer visible on wanikani.com.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "lesson_position": {
            "description": "The position that the subject appears in lessons. Note that the\nvalue is scoped to the level of the subject, so there are duplicate\nvalues across levels.\n",
            "format": "int32",
            "type": "integer"
          },
          "level": {
            "description": "The level of the subject, from `1` to `60`.",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          },
          "meaning_mnemonic": {
            "description": "The subject's meaning mnemonic.",
            "type": "string"
          },
          "meanings": {
            "description": "The subject meanings.",
            "items": {
              "$ref": "#/components/schemas/subjectMeaning"
            },
            "type": "array"
          },
          "slug": {
            "description": "The string that is used when generating the document URL for the\nsubject. Radicals use their meaning, downcased. Kanji and vocabulary\nuse their characters.\n",
            "type": "string"
          },
          "spaced_repitition_system_id": {
            "description": "Unique identifier of the associated spaced_repetition_system.\n",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "subjectContextSentence": {
        "properties": {
          "en": {
            "description": "English translation of the sentence",
            "type": "string"
          },
          "ja": {
            "description": "Japanese context sentence",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectImage": {
        "properties": {
          "content_type": {
            "description": "The content type of the image. Currently the API delivers\n`image/png` and `image/svg+xml`.\n",
            "enum": [
              "image/png",
              "image/svg+xml"
            ],
            "type": "string"
          },
          "metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/subjectMetadataSvg"
              },
              {
                "$ref": "#/components/schemas/subjectMetadataPng"
              }
            ]
          },
          "url": {
            "description": "The location of the image.",
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectKanji": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectCommon"
          },
          {
            "properties": {
              "amalgamation_subject_ids": {
                "description": "An array of numeric identifiers for the vocabulary that have the\nkanji as a component.\n",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "component_subject_ids": {
                "description": "An array of numeric identifiers for the radicals that make up\nthis kanji. Note that these are the subjects that must have\npassed assignments in order to unlock this subject's assignment.\n",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "meaning_hint": {
                "description": "Meaning hint for the kanji.",
                "nullable": true,
                "type": "string"
              },
              "reading_hint": {
                "description": "Reading hint for the kanji.",
                "nullable": true,
                "type": "string"
              },
              "reading_mnemonic": {
                "description": "The kanji's reading mnemonic.",
                "type": "string"
              },
              "readings": {
                "description": "Selected readings for the kanji.",
                "items": {
                  "$ref": "#/components/schemas/subjectReadingKanji"
                },
                "type": "array"
              },
              "visually_similar_subject_ids": {
                "description": "An array of numeric identifiers for kanji which are visually\nsimilar to the kanji in question.\n",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "subjectMeaning": {
        "properties": {
          "accepted_answer": {
            "description": "Indicates if the meaning is used to evaluate user input for\ncorrectness.\n",
            "type": "boolean"
          },
          "meaning": {
            "description": "A singular subject meaning.",
            "type": "string"
          },
          "primary": {
            "description": "Indicates priority in the WaniKani system.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "subjectMetadataPng": {
        "properties": {
          "color": {
            "description": "Color of the asset in hexadecimal.",
            "pattern": "^#[0-9A-F]{6}$",
            "type": "string"
          },
          "dimensions": {
            "description": "Dimension of the asset in pixels.",
            "pattern": "^\\d+x\\d+$",
            "type": "string"
          },
          "style_name": {
            "description": "A name descriptor.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectMetadataSvg": {
        "properties": {
          "inline_styles": {
            "description": "The SVG asset contains built-in CSS styling.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "subjectPronunciation": {
        "properties": {
          "content_type": {
            "description": "The content type of the audio. Currently the API delivers\n`audio/mpeg` and `audio/ogg`.\n",
            "enum": [
              "audio/mpeg",
              "audio/ogg"
            ],
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/subjectPronunciationMetadata"
          },
          "url": {
            "description": "The location of the audio.",
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectPronunciationMetadata": {
        "description": "Details about the pronunciation audio.",
        "properties": {
          "gender": {
            "description": "The gender of the voice actor.",
            "type": "string"
          },
          "pronunciation": {
            "description": "Vocabulary being pronounced in kana.",
            "type": "string"
          },
          "source_id": {
            "description": "A unique ID shared between same source pronunciation audio.\n",
            "format": "int32",
            "type": "integer"
          },
          "voice_actor_id": {
            "description": "A unique ID belonging to the voice actor.",
            "format": "int32",
            "type": "integer"
          },
          "voice_actor_name": {
            "description": "Humanized name of the voice actor.",
            "type": "string"
          },
          "voice_description": {
            "description": "Description of the voice.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectRadical": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectCommon"
          },
          {
            "properties": {
              "amalgamation_subject_ids": {
                "description": "An array of numeric identifiers for the kanji that have the\nradical as a component.\n",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "character_images": {
                "description": "A collection of images of the radical.",
                "items": {
                  "$ref": "#/components/schemas/subjectImage"
                },
                "type": "array"
              },
              "characters": {
                "description": "Unlike kanji and vocabulary, radicals can have a null value for\n`characters`. Not all radicals have a UTF entry, so the radical\nmust be visually represented with an image instead.\n",
                "nullable": true
              }
            }
          }
        ]
      },
      "subjectReading": {
        "properties": {
          "accepted_answer": {
            "description": "Indicates if the reading is used to evaluate user input for\ncorrectness.\n",
            "type": "boolean"
          },
          "primary": {
            "description": "Indicates priority in the WaniKani system.",
            "type": "boolean"
          },
          "reading": {
            "description": "A singular subject reading.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectReadingKanji": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectReading"
          },
          {
            "properties": {
              "type": {
                "description": "The kanji reading's classfication: `kunyomi`, `nanori`, or\n`onyomi`.\n",
                "enum": [
                  "kunyomi",
                  "nanori",
                  "onyomi"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "subjectResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/subjectRadical"
                  },
                  {
                    "$ref": "#/components/schemas/subjectKanji"
                  },
                  {
                    "$ref": "#/components/schemas/subjectVocabulary"
                  }
                ]
              }
            }
          }
        ]
      },
      "subjectType": {
        "description": "The type of the associated subject, one of: kanji, radical, or\nvocabulary.\n",
        "enum": [
          "kanji",
          "radical",
          "vocabulary"
        ],
        "type": "string"
      },
      "subjectVocabulary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectCommon"
          },
          {
            "properties": {
              "component_subject_ids": {
                "description": "An array of numeric identifiers for the kanji that make up this\nvocabulary. Note that these are the subjects that must be have\npassed assignments in order to unlock this subject's assignment.\n",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "context_sentences": {
                "description": "A collection of context sentences.",
                "items": {
                  "$ref": "#/components/schemas/subjectContextSentence"
                },
                "type": "array"
              },
              "meaning_mnemonic": {
                "description": "The subject's meaning mnemonic.",
                "type": "string"
              },
              "parts_of_speech": {
                "description": "Parts of speech.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "pronunciation_audios": {
                "description": "A collection of pronunciation audio.",
                "items": {
                  "$ref": "#/components/schemas/subjectPronunciation"
                },
                "type": "array"
              },
              "reading_mnemonic": {
                "description": "The subject's reading mnemonic.",
                "type": "string"
              },
              "readings": {
                "description": "Selected readings for the vocabulary.",
                "items": {
                  "$ref": "#/components/schemas/subjectReading"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "summary": {
        "properties": {
          "lessons": {
            "description": "Details about subjects available for lessons.",
            "items": {
              "$ref": "#/components/schemas/summaryLesson"
            },
            "type": "array"
          },
          "next_reviews_at": {
            "description": "Earliest date when the reviews are available. Is `null` when the\nuser has no reviews scheduled.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "reviews": {
            "description": "Details about subjects available for reviews now and in the next 24\nhours by the hour (total of 25 objects).\n",
            "items": {
              "$ref": "#/components/schemas/summaryReview"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "summaryLesson": {
        "properties": {
          "available_at": {
            "description": "When the paired `subject_ids` are available for lessons. Always\nbeginning of the current hour when the API endpoint is accessed.\n",
            "format": "date-time",
            "type": "string"
          },
          "subject_ids": {
            "description": "Collection of unique identifiers for subjects.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "summaryReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/report"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/summary"
              }
            }
          }
        ]
      },
      "summaryReview": {
        "allOf": [
          {
            "$ref": "#/components/schemas/summaryLesson"
          },
          {
            "properties": {
              "available_at": {
                "description": "When the paired `subject_ids` are available for reviews. All\ntimestamps are the top of an hour.\n"
              }
            }
          }
        ]
      },
      "user": {
        "properties": {
          "current_vacation_started_at": {
            "description": "If the user is on vacation, this will be the timestamp of when that\nvacation started. If the user is not on vacation, this is `null`.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "level": {
            "description": "The current level of the user. This ignores subscription status.\n",
            "format": "int32",
            "type": "integer"
          },
          "preferences": {
            "$ref": "#/components/schemas/userPreferences"
          },
          "profile_url": {
            "description": "The URL to the user's public facing profile page.",
            "format": "url",
            "type": "string"
          },
          "started_at": {
            "description": "The signup date for the user.",
            "format": "date-time",
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/userSubscription"
          },
          "username": {
            "description": "The user's username.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "userPreferences": {
        "description": "User settings specific to the WaniKani application.",
        "properties": {
          "default_voice_actor_id": {
            "description": "The voice actor to be used for lessons and reviews. The value is\nassociated to\n`subject.pronunciation_audios.metadata.voice_actor_id`.\n",
            "format": "int32",
            "type": "integer"
          },
          "lessons_autoplay_audio": {
            "description": "Automatically play pronunciation audio for vocabulary during\nlessons.\n",
            "type": "boolean"
          },
          "lessons_batch_size": {
            "description": "Number of subjects introduced to the user during lessons before\nquizzing.\n",
            "format": "int32",
            "type": "integer"
          },
          "lessons_presentation_order": {
            "description": "The order in which lessons are presented. The options are\n`ascending_level_then_subject`, `shuffled`, and\n`ascending_level_then_shuffled`. The default (and best experience)\nis `ascending_level_then_subject`.\n",
            "enum": [
              "ascending_level_then_subject",
              "shuffled",
              "ascending_level_then_shuffled"
            ],
            "type": "string"
          },
          "reviews_autoplay_audio": {
            "description": "Automatically play pronunciation audio for vocabulary during\nreviews.\n",
            "type": "boolean"
          },
          "reviews_display_srs_indicator": {
            "description": "Toggle for display SRS change indicator after a subject has been\ncompletely answered during review.\n",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "userReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/report"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        ]
      },
      "userSubscription": {
        "description": "Details about the user's subscription state.",
        "properties": {
          "active": {
            "description": "Whether or not the user currently has a paid subscription.\n",
            "type": "boolean"
          },
          "max_level_granted": {
            "description": "The maximum level of content accessible to the user for lessons,\nreviews, and content review. For unsubscribed/free users, the\nmaximum level is `3`. For subscribed users, this is `60`.\n**Any application that uses data from the WaniKani API must respect\nthese access limits**.\n",
            "enum": [
              3,
              60
            ],
            "format": "int32",
            "type": "integer"
          },
          "period_ends_at": {
            "description": "The date when the user's subscription period ends. If the user has\nsubscription type `lifetime` or `free` then the value is `null`.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "The type of subscription the user has. Options are following:\n  `free`, `recurring`, and `lifetime`.\n",
            "enum": [
              "free",
              "recurring",
              "lifetime"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "userUpdate": {
        "properties": {
          "user": {
            "properties": {
              "preferences": {
                "$ref": "#/components/schemas/userPreferences"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "voiceActor": {
        "properties": {
          "description": {
            "description": "Details about the voice actor.",
            "type": "string"
          },
          "gender": {
            "description": "`male` or `female`\n",
            "enum": [
              "male",
              "female"
            ],
            "type": "string"
          },
          "name": {
            "description": "The voice actor's name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "voiceActorCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/voiceActorResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "voiceActorResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/voiceActor"
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "apiKey": {
        "bearerFormat": "v2 API key",
        "scheme": "bearer",
        "type": "http",
        "description": "WaniKani uses your secret API token to authenticate requests to the API.\nYou can obtain and manage your v2 token in\n[Settings / API Tokens](https://www.wanikani.com/settings/personal_access_tokens)\non WaniKani. The token **has** to be included with every request, and\nshould be delivered in a HTTP header that looks like:\n\n`Authorization: Bearer <api_token_here>`\n\nAlso note that all requests must be made over HTTPS. Any requests made\nover HTTP or without authentication headers will fail.\n"
      }
    }
  }
}
