{
  "openapi": "3.0.2",
  "info": {
    "title": "WaniKani API",
    "version": "v2 Revision 20170710"
  },
  "servers": [
    {
      "url": "https://api.wanikani.com/v2"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "Assignments"
    },
    {
      "name": "Level Progressions"
    },
    {
      "name": "Resets"
    },
    {
      "name": "Reviews"
    },
    {
      "name": "Review Statistics"
    },
    {
      "name": "Spaced Repetition Systems"
    },
    {
      "name": "Study Materials"
    },
    {
      "name": "Subjects"
    }
  ],
  "paths": {
    "/assignments": {
      "get": {
        "description": "Returns a collection of all assignments, ordered by ascending `created_at`, 500 at a time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only assignments available at or after this time are returned.",
            "in": "query",
            "name": "available_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Only assignments available at or before this time are returned.",
            "in": "query",
            "name": "available_before",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "When set to `true`, returns assignments that have a value in `data.burned_at`. Returns assignments with a `null` `data.burned_at` if `false`.",
            "in": "query",
            "name": "burned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Return assignments with a matching value in the `hidden` attribute",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only assignments where `data.id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Returns assignments which are immediately available for lessons",
            "in": "query",
            "name": "immediately_available_for_lessons",
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Returns assignments which are immediately available for review",
            "in": "query",
            "name": "immediately_available_for_review",
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Returns assignments which are in the review state",
            "in": "query",
            "name": "in_review",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only assignments where the associated subject level matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "levels",
            "schema": {
              "items": {
                "format": "int32",
                "maximum": 60,
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only assignments where `data.srs_stage` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "srs_stages",
            "schema": {
              "items": {
                "format": "int32",
                "maximum": 9,
                "minimum": 0,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "When set to `true`, returns assignments that have a value in `data.started_at`. Returns assignments with a `null` `data.started_at` if `false`.",
            "in": "query",
            "name": "started",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only assignments where `data.subject_id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only assignments where `data.subject_type` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "subject_types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "When set to `true`, returns assignments that have a value in `data.unlocked_at`. Returns assignments with a `null` `data.unlocked_at` if `false`.",
            "in": "query",
            "name": "unlocked",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only assignments updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignmentCollection"
                }
              }
            },
            "description": "Successfully returned an assignment collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/assignments/{id}": {
      "get": {
        "description": "Retrieves a specific assignment by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignmentResource"
                }
              }
            },
            "description": "Successfully returned an assignment resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/assignments/{id}/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ],
      "put": {
        "description": "Mark the assignment as started, moving the assignment from the lessons queue to the review queue. Returns the updated assignment.\n\nAPI token used must have been created with the `assignments:start` permission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assignmentStart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignmentResource"
                }
              }
            },
            "description": "Successfully started an assignment",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      }
    },
    "/level_progressions": {
      "get": {
        "description": "Returns a collection of all level progressions, ordered by ascending `created_at`, 500 at a time.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/levelProgressionCollection"
                }
              }
            },
            "description": "Successfully returned a level progression collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Level Progressions"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/level_progressions/{id}": {
      "get": {
        "description": "Retrieves a specific level progression by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/levelProgressionResource"
                }
              }
            },
            "description": "Successfully returned a level progression resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Level Progressions"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the level progression.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/resets": {
      "get": {
        "description": "Returns a collection of all resets, ordered by ascending `created_at`, 500 at a time.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only resets where `data.id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only resets updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetCollection"
                }
              }
            },
            "description": "Successfully returned a reset collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Resets"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/resets/{id}": {
      "get": {
        "description": "Retrieves a specific reset by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetResource"
                }
              }
            },
            "description": "Successfully returned a reset resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Resets"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the reset.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/review_statistics": {
      "get": {
        "description": "Returns a collection of all review statistics, ordered by ascending created_at, 500 at a time.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Return review statistics with a matching value in the `hidden` attribute",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only review statistics where `data.id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Return review statistics where the `percentage_correct` is greater than the value.",
            "in": "query",
            "name": "precentages_greater_than",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return review statistics where the `percentage_correct` is less than the value.",
            "in": "query",
            "name": "precentages_less_than",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Only review statistics where `data.subject_id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only review statistics where `data.subject_type` matches one of the array values are returned. Valid values are: `radical`, `kanji`, or `vocabulary`.\n",
            "explode": false,
            "in": "query",
            "name": "subject_types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "Only review statistics updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewStatisticCollection"
                }
              }
            },
            "description": "Successfully returned a review statistic collection.",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Review Statistics"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/review_statistics/{id}": {
      "get": {
        "description": "Retrieves a specific review statistic by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewStatisticResource"
                }
              }
            },
            "description": "Successfully returned a review statistic resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Assignments"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/reviews": {
      "get": {
        "description": "Returns a collection of all reviews, ordered by ascending `created_at`, 1000 at a time.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only reviews where `data.assignment_id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "assignment_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only reviews where `data.id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only reviews where `data.subject_id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only reviews updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewCollection"
                }
              }
            },
            "description": "Successfully returned a review collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ],
      "post": {
        "description": "Creates a review for a specific `assignment_id`. Using the related `subject_id` is also a valid alternative to using `assignment_id`.\n\nSome criteria must be met in order for a review to be created: `available_at` must be not null and in the past.\n\nWhen a review is registered, the associated `assignment` and `review_statistic` are both updated. These are returned in the response body under `resources_updated`.\n\nAPI token used must have been created with the `reviews:create` permission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reviewCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewCreateResponse"
                }
              }
            },
            "description": "Successfully created a review."
          }
        },
        "tags": [
          "Reviews"
        ]
      }
    },
    "/reviews/{id}": {
      "get": {
        "description": "Retrieves a specific review by its id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reviewResource"
                }
              }
            },
            "description": "Successfully returned a review resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the assignment.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/spaced_repetition_systems": {
      "get": {
        "description": "Returns a collection of all spaced repetition systems, ordered by ascending `id`, 500 at a time.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only spaced repetition systems where `data.id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only spaced repetition systems updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spacedRepetitionSystemCollection"
                }
              }
            },
            "description": "Successfully returned a spaced repetition system collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Spaced Repetition Systems"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/spaced_repetition_systems/{id}": {
      "get": {
        "description": "Retrieves a specific spaced_repetition_system by its `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spacedRepetitionSystemResource"
                }
              }
            },
            "description": "Successfully returned a spaced repetition system resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Spaced Repetition Systems"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the spaced repetition system.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    },
    "/study_materials": {
      "get": {
        "description": "Returns a collection of all study material, ordered by ascending `created_at`, 500 at a time.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Return study materials with a matching value in the `hidden` attribute.",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only study material records where `data.id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only study material records where `data.subject_id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "subject_ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only study material records where `data.subject_type` matches one of the array values are returned. Valid values are: `radical`, `kanji`, or `vocabulary`.\n",
            "explode": false,
            "in": "query",
            "name": "subject_types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "Only study material records updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialCollection"
                }
              }
            },
            "description": "Successfully returned a study material collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Study Materials"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ],
      "post": {
        "description": "Creates a study material for a specific `subject_id`.\n\nThe owner of the api key can only create one study material per `subject_id`.\n\nAPI token used must have been created with the `study_materials:create` permission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/studyMaterialCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                }
              }
            },
            "description": "Successfully created a study material resource"
          }
        },
        "tags": [
          "Study Materials"
        ]
      }
    },
    "/study_materials/{id}": {
      "get": {
        "description": "Retrieves a specific study material by its id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                }
              }
            },
            "description": "Successfully returned a study material resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Study Materials"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the study material.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ],
      "put": {
        "description": "Updates a study material for a specific `id`.\n\nAPI token used must have been created with the `study_materials:update` permission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/studyMaterialUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                }
              }
            },
            "description": "Successfully created a study material resource"
          }
        },
        "tags": [
          "Study Materials"
        ]
      }
    },
    "/subjects": {
      "get": {
        "description": "Returns a collection of all subjects, ordered by ascending `created_at`, 1000 at a time.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          },
          {
            "$ref": "#/components/parameters/pageBeforeId"
          },
          {
            "$ref": "#/components/parameters/pageAfterId"
          },
          {
            "description": "Only subjects where `data.id` matches one of the array values are returned.",
            "explode": false,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects of the specified types.",
            "explode": false,
            "in": "query",
            "name": "types",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/subjectType"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects of the specified slug.",
            "explode": false,
            "in": "query",
            "name": "slugs",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects at the specified levels.",
            "explode": false,
            "in": "query",
            "name": "levels",
            "schema": {
              "items": {
                "format": "int32",
                "maximum": 60,
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Return subjects which are or are not hidden from the user-facing application.",
            "in": "query",
            "name": "hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only subjects updated after this time are returned.",
            "in": "query",
            "name": "updated_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subjectCollection"
                }
              }
            },
            "description": "Successfully returned a subject collection",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Subjects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        }
      ]
    },
    "/subjects/{id}": {
      "get": {
        "description": "Retrieves a specific subject by its `id`. The structure of the response depends on the subject type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subjectResource"
                }
              }
            },
            "description": "Successfully returned a subject resource",
            "headers": {
              "Last-Modified": {
                "$ref": "#/components/headers/lastModified"
              }
            }
          }
        },
        "tags": [
          "Subjects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/wanikaniRevision"
        },
        {
          "description": "Unique identifier of the subject.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "int32",
            "type": "integer"
          }
        }
      ]
    }
  },
  "components": {
    "headers": {
      "lastModified": {
        "description": "Date and time resource was last modified",
        "schema": {
          "type": "string"
        }
      }
    },
    "parameters": {
      "ifModifiedSince": {
        "in": "header",
        "name": "If-Modified-Since",
        "schema": {
          "type": "string"
        }
      },
      "pageAfterId": {
        "in": "query",
        "name": "page_after_id",
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "pageBeforeId": {
        "in": "query",
        "name": "page_before_id",
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "wanikaniRevision": {
        "in": "header",
        "name": "Wanikani-Revision",
        "required": true,
        "schema": {
          "enum": [
            20170710
          ],
          "type": "string"
        }
      }
    },
    "responses": {
      "401Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Unauthorized to make this request. You probably didn't send a valid API key"
      },
      "403Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Not allowed to make this request. Your API token doesn't have the correct permissions."
      },
      "404Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Our old friend 404. The resource you requested doesn't exist"
      },
      "422Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Something about your request was malformed."
      },
      "429Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "You've made too many requests in the past minute. You're allowed up to 60"
      },
      "500Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "Something broke on the server side. It's our fault, not yours. Try again, and if it keeps happening, let us know!"
      },
      "503Response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
            }
          }
        },
        "description": "The API is down at the moment. Try again later"
      },
      "assignmentResource": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/assignmentResource"
            }
          }
        },
        "description": "Successfully returned an assignment resource",
        "headers": {
          "Last-Modified": {
            "$ref": "#/components/headers/lastModified"
          }
        }
      }
    },
    "schemas": {
      "assignment": {
        "properties": {
          "available_at": {
            "description": "Timestamp when the related subject will be available in the user's review queue.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "burned_at": {
            "description": "Timestamp when the user reaches SRS stage `9` the first time.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the assignment was created.",
            "format": "date-time",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the associated subject has been hidden, preventing it from appearing in lessons or reviews.",
            "type": "boolean"
          },
          "passed_at": {
            "description": "Timestamp when the user reaches SRS stage `5` for the first time.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "resurrected_at": {
            "description": "Timestamp when the subject is resurrected and placed back in the user's review queue.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "srs_stage": {
            "description": "The current SRS stage interval. The interval range is determined by the related subject's spaced repetition system.",
            "format": "int32",
            "type": "integer"
          },
          "started_at": {
            "description": "Timestamp when the user completes the lesson for the related subject.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "subjectType": {
            "$ref": "#/components/schemas/subjectType"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "unlocked_at": {
            "description": "The timestamp when the related subject has its prerequisites satisfied and is made available in lessons.\nPrerequisites are:\n\n- The subject components have reached SRS stage `5` once (they have been \"passed\").\n- The user's level is equal to or greater than the level of the assignment’s subject.\n",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "assignmentCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/assignmentResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "assignmentResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/assignment"
              }
            }
          }
        ]
      },
      "assignmentStart": {
        "properties": {
          "started_at": {
            "description": "- If not set, `started_at` will default to the time the request is made.\n- `started_at` must be greater than or equal to `unlocked_at`.\n",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "baseResponse": {
        "properties": {
          "data_updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "object": {
            "$ref": "#/components/schemas/objectType"
          },
          "url": {
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "collection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseResponse"
          },
          {
            "properties": {
              "pages": {
                "properties": {
                  "next_url": {
                    "format": "url",
                    "nullable": true,
                    "type": "string"
                  },
                  "per_page": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "previous_url": {
                    "format": "url",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "total_count": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        ]
      },
      "errorResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "error": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "levelProgression": {
        "properties": {
          "abandoned_at": {
            "description": "Timestamp when the user abandons the level. This is primary used when the user initiates a reset.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "completed_at": {
            "description": "Timestamp when the user burns 100% of the assignments belonging to the associated subject's level.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the level progression is created",
            "format": "date-time",
            "type": "string"
          },
          "level": {
            "description": "The level of the progression, with possible values from `1` to `60`.",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          },
          "passed_at": {
            "description": "Timestamp when the user passes at least 90% of the assignments with a type of `kanji` belonging to the associated subject's level.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "started_at": {
            "description": "Timestamp when the user starts their first lesson of a subject belonging to the level.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "unlocked_at": {
            "description": "Timestamp when the user can access lessons and reviews for the `level`.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "levelProgressionCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/levelProgressionResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "levelProgressionResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/levelProgression"
              }
            }
          }
        ]
      },
      "objectType": {
        "description": "Describes the type of object that is being returned",
        "enum": [
          "collection",
          "report",
          "assignment",
          "kanji",
          "level_progression",
          "radical",
          "reset",
          "review_statistic",
          "review",
          "spaced_repetition_system",
          "study_material",
          "user",
          "vocabulary"
        ],
        "type": "string"
      },
      "reset": {
        "properties": {
          "confirmed_at": {
            "description": "Timestamp when the user confirmed the reset.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the reset was created.",
            "format": "date-time",
            "type": "string"
          },
          "original_level": {
            "description": "The user's level before the reset, from `1` to `60`.",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          },
          "target_level": {
            "description": "The user's level after the reset, from `1` to `60`. It must be less than or equal to `original_level`.",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "resetCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/resetResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "resetResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/reset"
              }
            }
          }
        ]
      },
      "resource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseResponse"
          },
          {
            "properties": {
              "id": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        ]
      },
      "review": {
        "properties": {
          "assignment_id": {
            "description": "Unique identifier of the associated assignment.",
            "format": "int32",
            "type": "integer"
          },
          "created_at": {
            "description": "Timestamp when the review was created.",
            "format": "date-time",
            "type": "string"
          },
          "ending_srs_stage": {
            "description": "The SRS stage interval calculated from the number of correct and incorrect answers, with valid values ranging from `1` to `9`.",
            "format": "int32",
            "maximum": 9,
            "minimum": 1,
            "type": "integer"
          },
          "incorrect_meaning_answers": {
            "description": "The number of times the user has answered the meaning incorrectly.",
            "format": "int32",
            "type": "integer"
          },
          "incorrect_reading_answers": {
            "description": "The number of times the user has answered the reading incorrectly.",
            "format": "int32",
            "type": "integer"
          },
          "spaced_repetition_system_id": {
            "description": "Unique identifier of the associated spaced_repetition_system.",
            "format": "int32",
            "type": "integer"
          },
          "starting_srs_stage": {
            "description": "The starting SRS stage interval, with valid values ranging from `1` to `8`.",
            "format": "int32",
            "maximum": 8,
            "minimum": 1,
            "type": "integer"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "reviewCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/reviewResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "reviewCreateRequest": {
        "properties": {
          "review": {
            "properties": {
              "assignment_id": {
                "description": "Unique identifier of the assignment. This or `subject_id` must be set.",
                "format": "int32",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp when the review was completed. Defaults to the time of the request if omitted from the request body. Must be in the past, but after `assignment.available_at`.",
                "format": "date-time",
                "type": "string"
              },
              "incorrect_meaning_answers": {
                "description": "Must be zero or a positive number. This is the number of times the meaning was answered **incorrectly**.",
                "format": "int32",
                "type": "integer"
              },
              "incorrect_reading_answers": {
                "description": "Must be zero or a positive number. This is the number of times the reading was answered **incorrectly**. Note that subjects with a type of `radical` do not quiz on readings. Thus, set this value to 0.",
                "format": "int32",
                "type": "integer"
              },
              "subject_id": {
                "description": "Unique identifier of the subject. This or `assignment_id` must be set.",
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "assignment_id",
              "subject_id",
              "incorrect_meaning_answers",
              "incorrect_reading_answers"
            ],
            "type": "object"
          }
        },
        "required": [
          "review"
        ],
        "type": "object"
      },
      "reviewCreateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reviewResource"
          },
          {
            "properties": {
              "resources_updated": {
                "properties": {
                  "assignment": {
                    "$ref": "#/components/schemas/assignmentResource"
                  },
                  "review_statistic": {
                    "$ref": "#/components/schemas/reviewStatisticResource"
                  }
                },
                "type": "object"
              }
            }
          }
        ]
      },
      "reviewResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/review"
              }
            }
          }
        ]
      },
      "reviewStatistic": {
        "properties": {
          "created_at": {
            "description": "Timestamp when the review statistic was created.",
            "format": "date-time",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the associated subject has been hidden, preventing it from appearing in lessons or reviews.",
            "type": "boolean"
          },
          "meaning_correct": {
            "description": "Total number of correct answers submitted for the meaning of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "meaning_current_streak": {
            "description": "The current, uninterrupted series of correct answers given for the meaning of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "meaning_incorrect": {
            "description": "Total number of incorrect answers submitted for the meaning of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "meaning_max_streak": {
            "description": "The longest, uninterrupted series of correct answers ever given for the meaning of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "percentage_correct": {
            "description": "The overall correct answer rate by the user for the subject, including both meaning and reading.",
            "format": "int32",
            "type": "integer"
          },
          "reading_correct": {
            "description": "Total number of correct answers submitted for the reading of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "reading_current_streak": {
            "description": "The current, uninterrupted series of correct answers given for the reading of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "reading_incorrect": {
            "description": "Total number of incorrect answers submitted for the reading of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "reading_max_streak": {
            "description": "The longest, uninterrupted series of correct answers ever given for the reading of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "subject_type": {
            "$ref": "#/components/schemas/subjectType"
          }
        },
        "type": "object"
      },
      "reviewStatisticCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/reviewStatisticResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "reviewStatisticResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/reviewStatistic"
              }
            }
          }
        ]
      },
      "spacedRepetitionSystem": {
        "properties": {
          "burning_stage_position": {
            "description": "`position` of the burning stage.\n",
            "format": "int32",
            "type": "integer"
          },
          "created_at": {
            "description": "Timestamp when the spaced_repetition_system was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Details about the spaced repetition system.",
            "type": "string"
          },
          "name": {
            "description": "The name of the spaced repetition system.",
            "type": "string"
          },
          "passing_stage_position": {
            "description": "`position` of the passing stage.\n",
            "format": "int32",
            "type": "integer"
          },
          "stages": {
            "properties": {
              "interval": {
                "description": "The length of time added to the time of review registration, adjusted to the beginning of the hour.",
                "format": "int32",
                "nullable": true,
                "type": "integer"
              },
              "interval_unit": {
                "description": "Unit of time. Can be the following: milliseconds, seconds, minutes, hours, days, and weeks.\n",
                "enum": [
                  "milliseconds",
                  "seconds",
                  "minutes",
                  "hours",
                  "days",
                  "weeks"
                ],
                "nullable": true,
                "type": "string"
              },
              "position": {
                "description": "The position of the stage within the continuous order.",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "starting_stage_position": {
            "description": "position of the starting stage.\n",
            "format": "int32",
            "type": "integer"
          },
          "unlocking_stage_position": {
            "description": "position of the unlocking stage.\n",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "spacedRepetitionSystemCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/spacedRepetitionSystemResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "spacedRepetitionSystemResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/spacedRepetitionSystem"
              }
            }
          }
        ]
      },
      "studyMaterial": {
        "properties": {
          "created_at": {
            "description": "Timestamp when the study material was created.",
            "format": "date-time",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the associated subject has been hidden, preventing it from appearing in lessons or reviews.",
            "type": "boolean"
          },
          "meaning_note": {
            "description": "Free form note related to the meaning(s) of the associated subject.",
            "nullable": true,
            "type": "string"
          },
          "meaning_synonyms": {
            "description": "Synonyms for the meaning of the subject. These are used as additional correct answers during reviews.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reading_note": {
            "description": "Free form note related to the reading(s) of the associated subject.",
            "nullable": true,
            "type": "string"
          },
          "subject_id": {
            "description": "Unique identifier of the associated subject.",
            "format": "int32",
            "type": "integer"
          },
          "subject_type": {
            "$ref": "#/components/schemas/subjectType"
          }
        },
        "type": "object"
      },
      "studyMaterialCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/studyMaterialResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "studyMaterialCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/studyMaterialUpdate"
          },
          {
            "properties": {
              "study_material": {
                "properties": {
                  "subject_id": {
                    "description": "Unique identifier of the subject.",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "subject_id"
                ]
              }
            }
          }
        ]
      },
      "studyMaterialResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/studyMaterial"
              }
            }
          }
        ]
      },
      "studyMaterialUpdate": {
        "properties": {
          "study_material": {
            "properties": {
              "meaning_note": {
                "description": "Meaning notes specific for the subject.",
                "type": "string"
              },
              "meaning_synonyms": {
                "description": "Meaning synonyms for the subject.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "reading_note": {
                "description": "Reading notes specific for the subject.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "subjectAuxiliaryMeaning": {
        "properties": {
          "meaning": {
            "description": "A singular subject meaning.",
            "type": "string"
          },
          "type": {
            "description": "Either `whitelist` or `blacklist`. When evaluating user input, whitelisted meanings are used to match for correctness. Blacklisted meanings are used to match for incorrectness.",
            "enum": [
              "whitelist",
              "blacklist"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/collection"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/subjectResource"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "subjectCommon": {
        "properties": {
          "auxiliary_meanings": {
            "description": "Collection of auxiliary meanings.",
            "items": {
              "$ref": "#/components/schemas/subjectAuxiliaryMeaning"
            },
            "type": "array"
          },
          "characters": {
            "description": "The UTF-8 characters for the subject, including kanji and hiragana.",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the subject was created.",
            "format": "date-time",
            "type": "string"
          },
          "document_url": {
            "description": "A URL pointing to the page on wanikani.com that provides detailed information about this subject.",
            "format": "url",
            "type": "string"
          },
          "hidden_at": {
            "description": "Timestamp when the subject was hidden, indicating associated assignments will no longer appear in lessons or reviews and that the subject page is no longer visible on wanikani.com.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "lesson_position": {
            "description": "The position that the subject appears in lessons. Note that the value is scoped to the level of the subject, so there are duplicate values across levels.",
            "format": "int32",
            "type": "integer"
          },
          "level": {
            "description": "The level of the subject, from `1` to `60`.",
            "format": "int32",
            "maximum": 60,
            "minimum": 1,
            "type": "integer"
          },
          "meaning_mnemonic": {
            "description": "The subject's meaning mnemonic.",
            "type": "string"
          },
          "meanings": {
            "description": "The subject meanings.",
            "items": {
              "$ref": "#/components/schemas/subjectMeaning"
            },
            "type": "array"
          },
          "slug": {
            "description": "The string that is used when generating the document URL for the subject. Radicals use their meaning, downcased. Kanji and vocabulary use their characters.",
            "type": "string"
          },
          "spaced_repitition_system_id": {
            "description": "Unique identifier of the associated spaced_repetition_system.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "subjectContextSentence": {
        "properties": {
          "en": {
            "description": "English translation of the sentence",
            "type": "string"
          },
          "ja": {
            "description": "Japanese context sentence",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectImage": {
        "properties": {
          "content_type": {
            "description": "The content type of the image. Currently the API delivers `image/png` and `image/svg+xml`.",
            "enum": [
              "image/png",
              "image/svg+xml"
            ],
            "type": "string"
          },
          "metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/subjectMetadataSvg"
              },
              {
                "$ref": "#/components/schemas/subjectMetadataPng"
              }
            ]
          },
          "url": {
            "description": "The location of the image.",
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectKanji": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectCommon"
          },
          {
            "properties": {
              "amalgamation_subject_ids": {
                "description": "An array of numeric identifiers for the vocabulary that have the kanji as a component.",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "component_subject_ids": {
                "description": "An array of numeric identifiers for the radicals that make up this kanji. Note that these are the subjects that must have passed assignments in order to unlock this subject's assignment.",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "meaning_hint": {
                "description": "Meaning hint for the kanji.",
                "nullable": true,
                "type": "string"
              },
              "reading_hint": {
                "description": "Reading hint for the kanji.",
                "nullable": true,
                "type": "string"
              },
              "reading_mnemonic": {
                "description": "The kanji's reading mnemonic.",
                "type": "string"
              },
              "readings": {
                "description": "Selected readings for the kanji.",
                "items": {
                  "$ref": "#/components/schemas/subjectReadingKanji"
                },
                "type": "array"
              },
              "visually_similar_subject_ids": {
                "description": "An array of numeric identifiers for kanji which are visually similar to the kanji in question.",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "subjectMeaning": {
        "properties": {
          "accepted_answer": {
            "description": "Indicates if the meaning is used to evaluate user input for correctness.",
            "type": "boolean"
          },
          "meaning": {
            "description": "A singular subject meaning.",
            "type": "string"
          },
          "primary": {
            "description": "Indicates priority in the WaniKani system.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "subjectMetadataPng": {
        "properties": {
          "color": {
            "description": "Color of the asset in hexadecimal.",
            "pattern": "^#[0-9A-F]{6}$",
            "type": "string"
          },
          "dimensions": {
            "description": "Dimension of the asset in pixels.",
            "pattern": "^\\d+x\\d+$",
            "type": "string"
          },
          "style_name": {
            "description": "A name descriptor.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectMetadataSvg": {
        "properties": {
          "inline_styles": {
            "description": "The SVG asset contains built-in CSS styling.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "subjectPronunciation": {
        "properties": {
          "content_type": {
            "description": "The content type of the audio. Currently the API delivers `audio/mpeg` and `audio/ogg`.",
            "enum": [
              "audio/mpeg",
              "audio/ogg"
            ],
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/subjectPronunciationMetadata"
          },
          "url": {
            "description": "The location of the audio.",
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectPronunciationMetadata": {
        "description": "Details about the pronunciation audio.",
        "properties": {
          "gender": {
            "description": "The gender of the voice actor.",
            "type": "string"
          },
          "pronunciation": {
            "description": "Vocabulary being pronounced in kana.",
            "type": "string"
          },
          "source_id": {
            "description": "A unique ID shared between same source pronunciation audio.",
            "format": "int32",
            "type": "integer"
          },
          "voice_actor_id": {
            "description": "A unique ID belonging to the voice actor.",
            "format": "int32",
            "type": "integer"
          },
          "voice_actor_name": {
            "description": "Humanized name of the voice actor.",
            "type": "string"
          },
          "voice_description": {
            "description": "Description of the voice.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectRadical": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectCommon"
          },
          {
            "properties": {
              "amalgamation_subject_ids": {
                "description": "An array of numeric identifiers for the kanji that have the radical as a component.",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "character_images": {
                "description": "A collection of images of the radical.",
                "items": {
                  "$ref": "#/components/schemas/subjectImage"
                },
                "type": "array"
              },
              "characters": {
                "description": "Unlike kanji and vocabulary, radicals can have a null value for `characters`. Not all radicals have a UTF entry, so the radical must be visually represented with an image instead.",
                "nullable": true
              }
            }
          }
        ]
      },
      "subjectReading": {
        "properties": {
          "accepted_answer": {
            "description": "Indicates if the reading is used to evaluate user input for correctness.",
            "type": "boolean"
          },
          "primary": {
            "description": "Indicates priority in the WaniKani system.",
            "type": "boolean"
          },
          "reading": {
            "description": "A singular subject reading.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "subjectReadingKanji": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectReading"
          },
          {
            "properties": {
              "type": {
                "description": "The kanji reading's classfication: `kunyomi`, `nanori`, or `onyomi`.\n",
                "enum": [
                  "kunyomi",
                  "nanori",
                  "onyomi"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "subjectResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          },
          {
            "properties": {
              "data": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/subjectRadical"
                  },
                  {
                    "$ref": "#/components/schemas/subjectKanji"
                  },
                  {
                    "$ref": "#/components/schemas/subjectVocabulary"
                  }
                ]
              }
            }
          }
        ]
      },
      "subjectType": {
        "description": "The type of the associated subject, one of: kanji, radical, or vocabulary.",
        "enum": [
          "kanji",
          "radical",
          "vocabulary"
        ],
        "type": "string"
      },
      "subjectVocabulary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subjectCommon"
          },
          {
            "properties": {
              "component_subject_ids": {
                "description": "An array of numeric identifiers for the kanji that make up this vocabulary. Note that these are the subjects that must be have passed assignments in order to unlock this subject's assignment.",
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "context_sentences": {
                "description": "A collection of context sentences.",
                "items": {
                  "$ref": "#/components/schemas/subjectContextSentence"
                },
                "type": "array"
              },
              "meaning_mnemonic": {
                "description": "The subject's meaning mnemonic.",
                "type": "string"
              },
              "parts_of_speech": {
                "description": "Parts of speech.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "pronunciation_audios": {
                "description": "A collection of pronunciation audio.",
                "items": {
                  "$ref": "#/components/schemas/subjectPronunciation"
                },
                "type": "array"
              },
              "reading_mnemonic": {
                "description": "The subject's reading mnemonic.",
                "type": "string"
              },
              "readings": {
                "description": "Selected readings for the vocabulary.",
                "items": {
                  "$ref": "#/components/schemas/subjectReading"
                },
                "type": "array"
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "apiKey": {
        "bearerFormat": "v2 API key",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}
