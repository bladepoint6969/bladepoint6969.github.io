---
openapi: 3.0.2
info:
  title: WaniKani API v2
  version: '20170710'
  contact:
    email: hello@wanikani.com
    url: https://wanikani.com/
    name: WaniKani
  description: |
    # Introduction

    Welcome to "WaniKani: The API"! You can use our API to access progress data
    for a user's account and a ton general reference data for the subjects
    within WaniKani.

    This version is built around a
    [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer)ful
    structure, with consistent, resource-oriented URLs. We support that
    structure with standard HTTP features: HTTP verbs for all our endpoints to
    indicate different actions,
    [HTTP authentication headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods),
    and [HTTP response codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)
    to indicate both success and various errors. We've turned on cross-origin
    resource sharing to allow for secure client-side access. We respond to all
    requests with JSON, making it easy to parse those responses into native
    objects in a variety of languages. These should open up the API to any
    client that supports these features and data structures.

    We've got information on general usage, like authentication and error codes,
    in Getting Started. We make a few suggestions on how to optimize your usage
    of the API in Best Practices and clarify a few obscure topics under
    Additional Information. Finally, details for all of the available resources
    and endpoints are under Resources.

    Feel free to reach out via email or through the
    [community](https://community.wanikani.com/) if you have any questions,
    comments, or requests about the API.

    # Getting Started
    ## Response Structure
    We return JSON from all the API endpoints, even when an error occurs.

    There are two main structures we return: resources and collections. Singular
    resource endpoints deliver information about a single entity, such as an
    assignment or subject. Collections contain summary data about a bunch of
    resources, and also include each of the resources.

    There's a third type of structure that's less common: a report. Reports
    summarize disparate or novel information into a single place, and don't
    follow the same structure as collections.

    All of the responses have a few shared, high-level attributes: `object`,
    `url`, `data_updated_at`, and `data`.

    ### Object Types
    Every successful API response contains an `object` attribute that tells you
    which kind of thing you're getting. As mentioned before, there are two
    object types that return information on many different resources:

    - `collection`
    - `report`

    The following are singular resources:

    - `assignment`
    - `kanji`
    - `level_progression`
    - `radical`
    - `reset`
    - `review_statistic`
    - `review`
    - `spaced_repetition_system`
    - `study_material`
    - `user`
    - `vocabulary`

    ### Data Types
    We stick to the common JSON data types in our responses: strings, integers,
    booleans, arrays, and objects. We follow the Javascript standard for date
    formatting, returning them in [ISO 8601](https://xkcd.com/1179/) format,
    rounded to the microsecond.

    ## Pagination
    ### Collection Size
    By default, the maximum number of resources returned for collection
    endpoints is 500. Some endpoints may return a different size — `reviews` and
    `subjects` have a maximum size of 1,000.

    Any collection response has the per-page count in the `pages.per_page`
    attribute. Those same responses have a `total_count` attribute, too. That is
    a count of all resources available within the specified scope, **not**
    limited to pagination.

    ### Pagination in Action
    When there are more resources to return than the per-page limit, we use a
    [cursor-based pagination](https://www.sitepoint.com/paginating-real-time-data-cursor-based-pagination/)
    scheme to move through the pages of results. We use the `id` of a resource
    as the cursor.

    Collections have the following nested within a pages attribute:

    | Attribute | Data Type | Description |
    |-----------|-----------|-------------|
    | `next_url` | `null` or String | The URL of the next page of results. If there are no more results, the value is `null`. |
    | `previous_url` | `null` or String | The URL of the previous page of results. If there are no results at all or no previous page to go to, the value is `null`.
    | `per_page` | Integer | Maximum number of resources delivered for this collection. |

    > **_Pro tip:_**  the first page has no previous page, and the last page has
    > no next page.

    The previous page of results can be requested by passing in the
    `page_before_id` parameter, with the value being the `id` you want to look
    before. Similar logic applies for the next page. Pass in the `page_after_id`
    parameter with with the `id` you want to look after.

    If a cursor is outside the range of `id`s for the collection, an empty
    result set is returned for `data`.

    #### Example
    Let’s say there are four resources with IDs of 1, 2, 3, 4.

    - If we make a request with `...?page_after_id=2`, then we'll get resources
      with IDs 3 and 4.
    - If we make a request with `...?page_before_id=3`, then we'll get resources
      with IDs 1 and 2.
    - If we make a request with `...?page_after_id=5`, then we'll get a
      collection with an empty `data` field.

    ## Filters
    Collections have optional filters to help narrow the results returned. The
    filters are passed in as URL parameters, like
    `?parameter=value&other_parameter=value`.

    Any time we take a query parameter that's listed as an array data type, we
    take that array as a comma delimited list of values. A single value is also
    valid.

    So, if a collection endpoint takes `subject_ids` as an argument for
    filtering results, your requests might have the following formats:

    - A single-member `subject_ids` request: `...?subject_ids=8`
    - A multiple-member `subject_ids` request: `...?subject_ids=8,16,64`

    ## Errors
    We use standard HTTP response codes to indicate the status of the response.
    Codes in the 200s indicate success, 400s usually indicate a client
    configuration problem (that's you), while 500s indicate that something bad
    is happening on the server (that's us).

    The codes are presented in the header of the response; some error responses
    will also contain a body with the message specified below:

    | Code | Meaning | Message |
    |------|---------|---------|
    | 200 | Success | n/a |
    | 401 | Unauthorized | "Unauthorized. Nice try." |
    | 403 | Forbidden | |
    | 404 | Not Found | |
    | 422 | Unprocessable Entity | Description of how the request was malformed. |
    | 429 | Too Many Requests | |
    | 500 | Internal Server Error | n/a |
    | 503 | Service Unavailable | n/a |

    ## Rate Limit
    We enforce the following rate limits to ensure decent response times for
    everyone using the API:

    | Throttle            | Value |
    |---------------------|-------|
    | Requests per minute | 60    |

    An HTTP status code of `429` (Forbidden) and a body with the message
    `Rate Limit Exceeded` is returned if the limits are exceeded (shocking, we
    know).

    ## Revisions (aka Versioning)
    Any time we make 'breaking changes' to the API, we release a new,
    timestamped revision of the API. Non-breaking changes don't trigger a new
    revision, and those changes are available in all versions of the API.

    - A breaking change is anything that changes the existing structure of a
      response, e.g. the renaming of a field in a resource.
    - Non-breaking changes are things like exposing new resource attributes or
      adding whole new endpoints.

    Revisions are designated by timestamps in the format `YYYYMMDD`. We expect
    the revision to be included in all API requests to the server in a header
    that looks like the following: `Wanikani-Revision: 20170710`.

    See the
    [list of revisions and changelogs](https://docs.api.wanikani.com/20170710/#)
    for more details.

    > If you don't specify a revision, the API will default to the first
    > revision: [20170710](https://docs.api.wanikani.com/20170710).

    # Best Practices
    We're always working to make the API as performant as possible, but there
    are a few things you can do to optimize your use of the data we deliver and
    speed things up when you need to make new requests: cache data locally
    whenever possible, make conditional requests to minimize network load, and
    make use of the updated_after filter on a lot of the endpoints.

    When you're building applications or services that other people will use,
    there's also some work to be done to respect the access to content granted
    by a subscription to WaniKani (per our terms and generally being a good
    citizen).

    ## Caching
    Most of the data on WaniKani doesn't change that often, so long-lived caches
    or more permanent stores that are periodically updated can eliminate a lot
    of time-consuming requests and help with offline functionality, if that's
    something you're after.

    Here are a few recommendations that might influence what you cache and how
    long you keep it around:

    - Cache [subjects](#/Subjects) as aggressively as possible. They aren't very
      frequently updated, and you'll probably need to access them frequently.
      They're the object that ties together assignments, review statistics, and
      study materials.
    - Reviews and resets are never changed once recorded, but reviews are
      created frequently. You can put these two in long-term storage if you need
      them.
    - Assignments, review statistics, and study materials have moderate levels
      of updates. When a user levels up or passes a a subject, there might be a
      small flurry of activity with new assignments being created and existing
      records being updated. As an assignment gets further and further along in
      the SRS stages, those updates will become less and less frequent.
    - The summary report changes every hour. Caching the results of this request
      might help with offline activity, but the data changes, well, every hour.
    - The user endpoint isn't updated a ton, but when it does, it's going to be
      pretty important to capture.

    Do take note any of the above recommendations may become outdated, but we
    will try out best to communicate these changes.

    Caching is always tricky business. When do you expire it? How do you refresh
    it? Who's in charge of it?

    We've done a couple things to try and help with a couple of the problems
    around caching. The first is to support conditional requests, which lets us
    quickly tell you that a record hasn't changed since you got it last.
    The second is to give you tools to get only the updated or new records after
    any point in time, letting you easily refresh your local data caches and
    stores without having to parse all the records.

    ## Conditional Requests
    We accept the `If-None-Match` and `If-Modified-Since` headers for every
    endpoint. If the response body hasn't changed since the last request, then a
    HTTP status code `304` (Not Modified) and an empty response body is
    returned. The advantage to using these headers is a faster response time
    since we don't have to generate a full response; we assume you still have
    the unmodified data cached.

    Each response includes the `ETag` and `Last-Modified` headers that are used
    to populate `If-None-Match` and `If-Modified-Since`, respectively. These
    values can be used in future requests at the matching endpoint.

    If both `If-None-Match` and `If-Modified-Since` are passed in, then
    `If-None-Match` takes precedence.

    ### If-Modified-Since
    The `If-Modified-Since` request header takes in a `Last-Modified` value from
    the last request — or any datetime — in the following format:

    `If-Modified-Since: <day-name>, <day> <month> <year>
    <hour>:<minute>:<second> GMT`

    Where:

    - `<day-name>` — One of "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", or "Sun"
      (case-sensitive).
    - `<day>` — 2 digit day number, e.g. "04" or "23".
    - `<month>` — One of "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
      "Sep", "Oct", "Nov", "Dec" (case sensitive).
    - `<year>` — 4 digit year number, e.g. "1990" or "2016".
    - `<hour>` — 2 digit hour number, e.g. "09" or "23".
    - `<minute>` — 2 digit minute number, e.g. "04" or "59".
    - `<second>` — 2 digit second number, e.g. "04" or "59".
    - `GMT` — Greenwich Mean Time. HTTP dates are always expressed in GMT, never
      in local time.

    Example: `If-Modified-Since: Fri, 11 Nov 2011 11:11:11 GMT`

    The generally-excellent
    [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since)
    have more information on the `If-Modified-Since` header.

    ### If-None-Match
    The `If-None-Match` request header takes in an `ETag` value from the last
    request's response header:

    `If-None-Match: <etag_here>`

    The [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match)
    have more information on the `If-None-Match` header, too.

    ## Leveraging the `updated_after` Filter
    All of the collection endpoints support an `updated_after` filter. As you'd
    guess, that's going to only return records that have been updated after the
    timestamp you pass to us.

    ### Example/Scenario/Not a Fable
    How does that help with performance and caching? By only returning the
    records you need.

    Let's say you're building a [statistics site](https://www.wkstats.com/). You
    need to know about all the subjects plus get all of a user's assignments,
    review statistics, reviews, resets, and level progressions to figure out how
    they've done in the past and do some guesswork on how they might do in the
    future.

    Focusing in on the assignments, let's say you decide to re-calculate a
    user's progress every time they log in to use your site. Without the
    `updated_after` filter, you'd have to grab all their assignments, since
    there'd be no way to tell which ones had changed until after you retrieved
    them all. For high level users, that could be 18 sequential requests! Once
    you've made them sit through that progress bar, you'd need to parse all the
    results and compare to them what you've stored locally.

    With the `updated_after` filter, though, you can ask for only the records
    that have changed since the last time that user logged in, getting a
    smaller, faster response full of records you know you have to update or add
    internally. Even high activity users are only going to touch a small portion
    of their assignments at a time. We can generate that list of records far
    more rapidly, it'll be a smaller payload, and you probably won't need to
    page through results to get everything that you need.

    ## Respecting Subscription Restrictions
    WaniKani has
    [paid subscriptions](https://www.wanikani.com/account/subscription). That
    may come as a surprise in 2020, but it's true. Those subscriptions grant
    access to all the content past level three and let people to do lessons and
    reviews for that content.

    When the API is used for your own uses (populating spreadsheets, backing up
    progress, etc.), those access restrictions don't have that much of an
    impact. Most of the data delivered by the API belongs to you: assignments,
    study materials, review statistics, and those bits about how you progress
    through WaniKani. The only data that isn't yours is the content in subjects.
    All those mnemonics, hints, and relationships have been painstakingly
    crafted by the WaniKani staff to make learning kanji faster and better. That
    content is covered by pertinent copyright laws — which also means that fair
    use allows you to use it to learn on your own.

    Once you start building tools that can be used by other people, things
    change, though. First, you can't use the content to build anything that's
    for profit. Second, you need to respect the limitations put in place by the
    subscriptions. Both of those requirements are per our
    [terms](https://www.wanikani.com/terms). So, how do you do meet those
    requirements?

    The user endpoint has a `subscription` attribute. That should have
    everything you need.

    - `max_level_granted` defines the maximum level of content that's available
      to the user. It has two possible values: 3 and 60. The user shouldn't be
      able to access subjects above those levels. Lessons and reviews above
      those levels shouldn't be available at all and will be rejected if you try
      and submit them to us.
    - `active` is a boolean that tells you if the person has an active
      subscription.
    - `type` defines the kind of subscription, and works closely with
      `period_ends_at`. There are four values:
      - `free` subscriptions aren't really subscriptions, but can represent
        people who've never subscribed or have an inactive subscription. There's
        no `period_ends_at` for free subscriptions.
      - `recurring` subscriptions renew on a periodic basis. `period_ends_at`
        tells you when the subscription renews or expires. Since we give people
        access until the end of their subscription period even if they cancel,
        you can generally not check their subscription status until that time.
      - `lifetime` means the user can access WaniKani forever. `period_ends_at`
        is null, mainly because `∞` is hard for computers to get. It's possible
        that a lifetime user will ask for a refund or have payment difficulties,
        so scheduled checks on the subscription status are still needed.
      - `unknown` means the user subscription state isn't exactly known. This is
        a weird state on WaniKani, should be treated as free, and reported to
        the WaniKani developers.

    Your application can use `max_level_granted` as a first, easy line of
    defense. That restricts content access based on their subscription, and is
    most of what you need to do. The `active`, `type`, and `period_ends_at`
    fields are all there to let you build more robust solutions. Those help you
    figure out when your application needs to check up on subscription status
    (if ever) or do things like expire access if the user hasn't connected in a
    while.

    # Additional Information
    ## Spaced Repitition System
    Our [spaced repetition systems](#/Spaced%20Repetition%20Systems) determine
    how subjects progress from being unavailable to users (locked) through
    complete memorization (burned). The
    [knowledge guide](https://knowledge.wanikani.com/wanikani/srs-stages/) has
    some good general information about how we use SRS in WaniKani.

    A single spaced repetition system consists of N number of sequential stages.
    Each stage describes its position in the sequence as well as the time
    interval that’s used to determine when the subject will appear next in
    reviews.

    Each system has the following common characteristics.

    | Special stage name | Stage position/number | Description |
    |--------------------|-----------------------|-------------|
    | Unlocking stage | 0 | This is the initial stage for an assignment; it generally indicates the subject will appear in lessons. |
    | Starting stage | 1 | The minimum stage for a subject to appear in reviews. |
    | Passing stage | Value from the starting stage position up to the burning stage position	| Reaching this milestone counts towards level progression and the unlocking of additional subjects. |
    | Burning stage | N | This is the stage when the subject is complete, exits out of reviews and is no longer tested. |

    As mentioned before, we use the SRS stages to calculate the time until the
    next review (the 'space' in the 'spaced-repetition').

    - If the review goes well and there are no wrong answers, we move the
      assignment up to the next SRS stage. We make the assignment available
      'interval' hours from now, at the top of the hour. For example: given an
      assignment at stage `1`, when we submit a correct answer at 3:31pm, the
      assignment would move to SRS stage `2` and become available for another
      review at 11:00pm.
    - If there are wrong answers, we decrease the SRS stage based on the number
      of times it was wrong, and then again make it available according to the
      interval for that SRS stage.

    ## User Resets
    Users have the option to reset their account to a target level at or below
    their current level.

    Resets will show up in a variety of places. Explicit records will show up
    under [resets](#/Resets). They'll get a fresh
    [level progression](#/Level%20Progressions) for the target level of the
    reset, and the level progression for the level they abandoned gets an
    `abandoned_at` timestamp. Finally, the `assignments` and `review_statistics`
    for the affected levels will get set back to their default state, waiting to
    be unlocked or started, depending on the levels.
servers:
  - url: https://api.wanikani.com/v2
security:
  - apiKey: []
tags:
  - name: Assignments
    description: |
      Assignments contain information about a user's progress on a particular
      subject, including their current state and timestamps for various progress
      milestones. Assignments are created when a user has passed all the
      components of the given subject and the assignment is at or below their
      current level for the first time.
  - name: Level Progressions
    description: |
      Level progressions contain information about a user's progress through the
      WaniKani levels.

      A level progression is created when a user has met the prerequisites for
      leveling up, which are:

      - Reach a 90% passing rate on assignments for a user's current level
        with a `subject_type` of `kanji`. Passed assignments have `data.passed`
        equal to `true` and a `data.passed_at` that's in the past.
      - Have access to the level. Under [/user](#/User/user), the `data.level`
        must be less than or equal to `data.subscription.max_level_granted`.
  - name: Resets
    description: |
      Users can reset their progress back to any level at or below their current
      level. When they reset to a particular level, all of the `assignments` and
      `review_statistics` at that level or higher are set back to their default
      state.

      Resets contain information about when those resets happen, the starting
      level, and the target level.
  - name: Reviews
    description: |
      Reviews log all the correct and incorrect answers provided through the
      'Reviews' section of WaniKani. Review records are created when a user
      answers all the parts of a subject correctly once; some subjects have both
      meaning or reading parts, and some only have one or the other. Note that
      reviews are not created for the quizzes in lessons.
  - name: Review Statistics
    description: |
      Review statistics summarize the activity recorded in [reviews](#/Reviews).
      They contain sum the number of correct and incorrect answers for both
      meaning and reading. They track current and maximum streaks of correct
      answers. They store the overall percentage of correct answers versus total
      answers.

      A review statistic is created when the user has done their first review on
      the related subject.
  - name: Spaced Repetition Systems
    description: |
      Available spaced repetition systems used for calculating `srs_stage`
      changes to [Assignments](#/Assignments) and [Reviews](#/Reviews). Has
      relationship with [Subjects](#/Subjects)
  - name: Study Materials
    description: |
      Study materials store user-specific notes and synonyms for a given
      subject. The records are created as soon as the user enters any study
      information.
  - name: Subjects
    description: |
      Subjects are the radicals, kanji, and vocabulary that are learned through
      lessons and reviews. They contain basic dictionary information, such as
      meanings and/or readings, and information about their relationship to
      other items with WaniKani, like their level.
  - name: Summary
    description: |
      The summary report contains currently available lessons and reviews and
      the reviews that will become available in the next 24 hours, grouped by
      the hour.
  - name: User
    description: |
      The user summary returns basic information for the user making the API
      request, identified by their API key.
  - name: Voice Actors
    description: |
      Available voice actors used for vocabulary reading pronunciation audio.
paths:
  /assignments:
    get:
      description: |
        Returns a collection of all assignments, ordered by ascending
        `created_at`, 500 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Only assignments available at or after this time are returned.
          in: query
          name: available_after
          schema:
            format: date-time
            type: string
        - description: |
            Only assignments available at or before this time are returned.
          in: query
          name: available_before
          schema:
            format: date-time
            type: string
        - description: |
            When set to `true`, returns assignments that have a value in
            `data.burned_at`. Returns assignments with a `null` `data.burned_at`
            if `false`.
          in: query
          name: burned
          schema:
            type: boolean
        - description: |
            Return assignments with a matching value in the `hidden` attribute
          in: query
          name: hidden
          schema:
            type: boolean
        - description: |
            Only assignments where `data.id` matches one of the array values are
            returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - allowEmptyValue: true
          description: |
            Returns assignments which are immediately available for lessons
          in: query
          name: immediately_available_for_lessons
          schema:
            type: string
        - allowEmptyValue: true
          description: |
            Returns assignments which are immediately available for review
          in: query
          name: immediately_available_for_review
          schema:
            type: string
        - allowEmptyValue: true
          description: Returns assignments which are in the review state
          in: query
          name: in_review
          schema:
            type: string
        - description: |
            Only assignments where the associated subject level matches one of
            the array values are returned.
          explode: false
          in: query
          name: levels
          schema:
            items:
              format: int32
              maximum: 60
              minimum: 1
              type: integer
            type: array
        - description: |
            Only assignments where `data.srs_stage` matches one of the array
            values are returned.
          explode: false
          in: query
          name: srs_stages
          schema:
            items:
              format: int32
              maximum: 9
              minimum: 0
              type: integer
            type: array
        - description: |
            When set to `true`, returns assignments that have a value in
            `data.started_at`. Returns assignments with a `null`
            `data.started_at` if `false`.
          in: query
          name: started
          schema:
            type: boolean
        - description: |
            Only assignments where `data.subject_id` matches one of the array
            values are returned.
          explode: false
          in: query
          name: subject_ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Only assignments where `data.subject_type` matches one of the array
            values are returned.
          explode: false
          in: query
          name: subject_types
          schema:
            items:
              $ref: '#/components/schemas/subjectType'
            type: array
        - description: |
            When set to `true`, returns assignments that have a value in
            `data.unlocked_at`. Returns assignments with a `null`
            `data.unlocked_at` if `false`.
          in: query
          name: unlocked
          schema:
            type: boolean
        - description: Only assignments updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assignmentCollection'
          description: Successfully returned an assignment collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Assignments
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /assignments/{id}:
    get:
      description: Retrieves a specific assignment by its `id`.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assignmentResource'
          description: Successfully returned an assignment resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Assignments
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the assignment.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
  /assignments/{id}/start:
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the assignment.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
    put:
      description: |
        Mark the assignment as started, moving the assignment from the lessons
        queue to the review queue. Returns the updated assignment.

        API token used must have been created with the `assignments:start`
        permission.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assignmentStart'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assignmentResource'
          description: Successfully started an assignment
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Assignments
  /level_progressions:
    get:
      description: |
        Returns a collection of all level progressions, ordered by ascending
        `created_at`, 500 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - explode: false
          in: query
          name: id
          schema:
            items:
              format: int32
              type: integer
            type: array
        - in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/levelProgressionCollection'
          description: Successfully returned a level progression collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Level Progressions
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /level_progressions/{id}:
    get:
      description: Retrieves a specific level progression by its `id`.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/levelProgressionResource'
          description: Successfully returned a level progression resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Level Progressions
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the level progression.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
  /resets:
    get:
      description: |
        Returns a collection of all resets, ordered by ascending `created_at`,
        500 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Only resets where `data.id` matches one of the array values are
            returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: Only resets updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resetCollection'
          description: Successfully returned a reset collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Resets
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /resets/{id}:
    get:
      description: Retrieves a specific reset by its `id`.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resetResource'
          description: Successfully returned a reset resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Resets
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the reset.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
  /review_statistics:
    get:
      description: |
        Returns a collection of all review statistics, ordered by ascending
        `created_at`, 500 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Return review statistics with a matching value in the `hidden`
            attribute
          in: query
          name: hidden
          schema:
            type: boolean
        - description: |
            Only review statistics where `data.id` matches one of the array
            values are returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Return review statistics where the `percentage_correct` is greater
            than the value.
          in: query
          name: precentages_greater_than
          schema:
            format: int32
            type: integer
        - description: |
            Return review statistics where the `percentage_correct` is less than
            the value.
          in: query
          name: precentages_less_than
          schema:
            format: int32
            type: integer
        - description: |
            Only review statistics where `data.subject_id` matches one of the
            array values are returned.
          explode: false
          in: query
          name: subject_ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Only review statistics where `data.subject_type` matches one of the
            array values are returned. Valid values are: `radical`, `kanji`, or
            `vocabulary`.
          explode: false
          in: query
          name: subject_types
          schema:
            items:
              $ref: '#/components/schemas/subjectType'
            type: array
        - description: |
            Only review statistics updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reviewStatisticCollection'
          description: Successfully returned a review statistic collection.
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Review Statistics
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /review_statistics/{id}:
    get:
      description: Retrieves a specific review statistic by its `id`.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reviewStatisticResource'
          description: Successfully returned a review statistic resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Assignments
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the assignment.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
  /reviews:
    get:
      description: |
        Returns a collection of all reviews, ordered by ascending `created_at`,
        1000 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Only reviews where `data.assignment_id` matches one of the array
            values are returned.
          explode: false
          in: query
          name: assignment_ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Only reviews where `data.id` matches one of the array values are
            returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Only reviews where `data.subject_id` matches one of the array values
            are returned.
          explode: false
          in: query
          name: subject_ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: Only reviews updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reviewCollection'
          description: Successfully returned a review collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Reviews
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
    post:
      description: |
        Creates a review for a specific `assignment_id`. Using the related
        `subject_id` is also a valid alternative to using `assignment_id`.

        Some criteria must be met in order for a review to be created:
        `available_at` must be not null and in the past.

        When a review is registered, the associated `assignment` and
        `review_statistic` are both updated. These are returned in the response
        body under `resources_updated`.

        API token used must have been created with the `reviews:create`
        permission.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reviewCreateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reviewCreateResponse'
          description: Successfully created a review.
      tags:
        - Reviews
  /reviews/{id}:
    get:
      description: Retrieves a specific review by its id.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reviewResource'
          description: Successfully returned a review resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Reviews
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the assignment.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
  /spaced_repetition_systems:
    get:
      description: |
        Returns a collection of all spaced repetition systems, ordered by
        ascending `id`, 500 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Only spaced repetition systems where `data.id` matches one of the
            array values are returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Only spaced repetition systems updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/spacedRepetitionSystemCollection'
          description: |
            Successfully returned a spaced repetition system collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Spaced Repetition Systems
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /spaced_repetition_systems/{id}:
    get:
      description: Retrieves a specific spaced_repetition_system by its `id`.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/spacedRepetitionSystemResource'
          description: Successfully returned a spaced repetition system resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Spaced Repetition Systems
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the spaced repetition system.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
  /study_materials:
    get:
      description: |
        Returns a collection of all study material, ordered by ascending
        `created_at`, 500 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Return study materials with a matching value in the `hidden`
            attribute.
          in: query
          name: hidden
          schema:
            type: boolean
        - description: |
            Only study material records where `data.id` matches one of the array
            values are returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Only study material records where `data.subject_id` matches one of
            the array values are returned.
          explode: false
          in: query
          name: subject_ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: |
            Only study material records where `data.subject_type` matches one of
            the array values are returned. Valid values are: `radical`, `kanji`,
            or `vocabulary`.
          explode: false
          in: query
          name: subject_types
          schema:
            items:
              $ref: '#/components/schemas/subjectType'
            type: array
        - description: |
            Only study material records updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyMaterialCollection'
          description: Successfully returned a study material collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Study Materials
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
    post:
      description: |
        Creates a study material for a specific `subject_id`.

        The owner of the api key can only create one study material per
        `subject_id`.

        API token used must have been created with the `study_materials:create`
        permission.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyMaterialCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyMaterialResource'
          description: Successfully created a study material resource
      tags:
        - Study Materials
  /study_materials/{id}:
    get:
      description: Retrieves a specific study material by its id.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyMaterialResource'
          description: Successfully returned a study material resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Study Materials
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the study material.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
    put:
      description: |
        Updates a study material for a specific `id`.

        API token used must have been created with the `study_materials:update`
        permission.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyMaterialUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyMaterialResource'
          description: Successfully created a study material resource
      tags:
        - Study Materials
  /subjects:
    get:
      description: |
        Returns a collection of all subjects, ordered by ascending `created_at`,
        1000 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Only subjects where `data.id` matches one of the array values are
            returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: Return subjects of the specified types.
          explode: false
          in: query
          name: types
          schema:
            items:
              $ref: '#/components/schemas/subjectType'
            type: array
        - description: Return subjects of the specified slug.
          explode: false
          in: query
          name: slugs
          schema:
            items:
              type: string
            type: array
        - description: Return subjects at the specified levels.
          explode: false
          in: query
          name: levels
          schema:
            items:
              format: int32
              maximum: 60
              minimum: 1
              type: integer
            type: array
        - description: |
            Return subjects which are or are not hidden from the user-facing
            application.
          in: query
          name: hidden
          schema:
            type: boolean
        - description: Only subjects updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subjectCollection'
          description: Successfully returned a subject collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Subjects
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /subjects/{id}:
    get:
      description: |
        Retrieves a specific subject by its `id`. The structure of the response
        depends on the subject type.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subjectResource'
          description: Successfully returned a subject resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Subjects
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the subject.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
  /summary:
    get:
      description: Retrieves a summary report.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/summaryReport'
          description: Successfully returned a summary report
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Summary
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /user:
    get:
      description: Returns a summary of user information.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userReport'
          description: Successfully returned a user report
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - User
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
    put:
      description: |
        Returns an updated summary of user information.

        API token used must have been created with the `user:update` permission.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdate'
        description: |
          Only the values under `preferences` are allowed to be updated.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userReport'
          description: Successfully updated user preferences
      tags:
        - User
  /voice_actors:
    get:
      description: |
        Returns a collection of all voice actors, ordered by ascending
        `created_at`, 500 at a time.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
        - $ref: '#/components/parameters/pageBeforeId'
        - $ref: '#/components/parameters/pageAfterId'
        - description: |
            Only voice actors where `data.id` matches one of the array values
            are returned.
          explode: false
          in: query
          name: ids
          schema:
            items:
              format: int32
              type: integer
            type: array
        - description: Only voice actors updated after this time are returned.
          in: query
          name: updated_after
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/voiceActorCollection'
          description: Successfully returned a voice actor collection
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Voice Actors
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
  /voice_actors{id}:
    get:
      description: Retrieves a specific voice actor by its `id`.
      parameters:
        - $ref: '#/components/parameters/ifModifiedSince'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/voiceActorResource'
          description: Successfully returned a voice actor resource
          headers:
            Last-Modified:
              $ref: '#/components/headers/lastModified'
      tags:
        - Voice Actors
    parameters:
      - $ref: '#/components/parameters/wanikaniRevision'
      - description: Unique identifier of the voice actor.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
components:
  headers:
    lastModified:
      description: Date and time resource was last modified
      schema:
        type: string
  parameters:
    ifModifiedSince:
      in: header
      name: If-Modified-Since
      schema:
        type: string
    pageAfterId:
      in: query
      name: page_after_id
      schema:
        format: int32
        type: integer
    pageBeforeId:
      in: query
      name: page_before_id
      schema:
        format: int32
        type: integer
    wanikaniRevision:
      in: header
      name: Wanikani-Revision
      required: true
      schema:
        enum:
          - 20170710
        type: string
  responses:
    401Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
      description: |
        Unauthorized to make this request. You probably didn't send a valid API
        key
    403Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
      description: |
        Not allowed to make this request. Your API token doesn't have the
        correct permissions.
    404Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
      description: Our old friend 404. The resource you requested doesn't exist
    422Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
      description: Something about your request was malformed.
    429Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
      description: |
        You've made too many requests in the past minute. You're allowed up to
        60
    500Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
      description: |
        Something broke on the server side. It's our fault, not yours. Try
        again, and if it keeps happening, let us know!
    503Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
      description: The API is down at the moment. Try again later
    assignmentResource:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/assignmentResource'
      description: Successfully returned an assignment resource
      headers:
        Last-Modified:
          $ref: '#/components/headers/lastModified'
  schemas:
    assignment:
      properties:
        available_at:
          description: |
            Timestamp when the related subject will be available in the user's
            review queue.
          format: date-time
          nullable: true
          type: string
        burned_at:
          description: |
            Timestamp when the user reaches SRS stage `9` the first time.
          format: date-time
          nullable: true
          type: string
        created_at:
          description: Timestamp when the assignment was created.
          format: date-time
          type: string
        hidden:
          description: |
            Indicates if the associated subject has been hidden, preventing it
            from appearing in lessons or reviews.
          type: boolean
        passed_at:
          description: |
            Timestamp when the user reaches SRS stage `5` for the first time.
          format: date-time
          nullable: true
          type: string
        resurrected_at:
          description: |
            Timestamp when the subject is resurrected and placed back in the
            user's review queue.
          format: date-time
          nullable: true
          type: string
        srs_stage:
          description: |
            The current SRS stage interval. The interval range is determined by
            the related subject's spaced repetition system.
          format: int32
          type: integer
        started_at:
          description: |
            Timestamp when the user completes the lesson for the related
            subject.
          format: date-time
          nullable: true
          type: string
        subjectType:
          $ref: '#/components/schemas/subjectType'
        subject_id:
          description: Unique identifier of the associated subject.
          format: int32
          type: integer
        unlocked_at:
          description: |
            The timestamp when the related subject has its prerequisites
            satisfied and is made available in lessons.

            Prerequisites are:

            - The subject components have reached SRS stage `5` once (they have
              been "passed").
            - The user's level is equal to or greater than the level of the
              assignment’s subject.
          format: date-time
          nullable: true
          type: string
      type: object
    assignmentCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/assignmentResource'
              type: array
    assignmentResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/assignment'
    assignmentStart:
      properties:
        started_at:
          description: |
            - If not set, `started_at` will default to the time the request is
              made.
            - `started_at` must be greater than or equal to `unlocked_at`.
          format: date-time
          type: string
      type: object
    collection:
      allOf:
        - $ref: '#/components/schemas/report'
        - properties:
            pages:
              properties:
                next_url:
                  format: url
                  nullable: true
                  type: string
                per_page:
                  format: int32
                  type: integer
                previous_url:
                  format: url
                  nullable: true
                  type: string
              type: object
            total_count:
              format: int32
              type: integer
    errorResponse:
      properties:
        code:
          format: int32
          type: integer
        error:
          type: string
      type: object
    levelProgression:
      properties:
        abandoned_at:
          description: |
            Timestamp when the user abandons the level. This is primary used
            when the user initiates a reset.
          format: date-time
          nullable: true
          type: string
        completed_at:
          description: |
            Timestamp when the user burns 100% of the assignments belonging to
            the associated subject's level.
          format: date-time
          nullable: true
          type: string
        created_at:
          description: Timestamp when the level progression is created
          format: date-time
          type: string
        level:
          description: |
            The level of the progression, with possible values from `1` to `60`.
          format: int32
          maximum: 60
          minimum: 1
          type: integer
        passed_at:
          description: |
            Timestamp when the user passes at least 90% of the assignments with
            a type of `kanji` belonging to the associated subject's level.
          format: date-time
          nullable: true
          type: string
        started_at:
          description: |
            Timestamp when the user starts their first lesson of a subject
            belonging to the level.
          format: date-time
          nullable: true
          type: string
        unlocked_at:
          description: |
            Timestamp when the user can access lessons and reviews for the
            `level`.
          format: date-time
          nullable: true
          type: string
      type: object
    levelProgressionCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/levelProgressionResource'
              type: array
    levelProgressionResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/levelProgression'
    objectType:
      description: Describes the type of object that is being returned
      enum:
        - collection
        - report
        - assignment
        - kanji
        - level_progression
        - radical
        - reset
        - review_statistic
        - review
        - spaced_repetition_system
        - study_material
        - user
        - vocabulary
      type: string
    report:
      properties:
        data_updated_at:
          format: date-time
          type: string
        object:
          $ref: '#/components/schemas/objectType'
        url:
          format: url
          type: string
      type: object
    reset:
      properties:
        confirmed_at:
          description: Timestamp when the user confirmed the reset.
          format: date-time
          nullable: true
          type: string
        created_at:
          description: Timestamp when the reset was created.
          format: date-time
          type: string
        original_level:
          description: The user's level before the reset, from `1` to `60`.
          format: int32
          maximum: 60
          minimum: 1
          type: integer
        target_level:
          description: |
            The user's level after the reset, from `1` to `60`. It must be less
            than or equal to `original_level`.
          format: int32
          maximum: 60
          minimum: 1
          type: integer
      type: object
    resetCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/resetResource'
              type: array
    resetResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/reset'
    resource:
      allOf:
        - $ref: '#/components/schemas/report'
        - properties:
            id:
              format: int32
              type: integer
    review:
      properties:
        assignment_id:
          description: Unique identifier of the associated assignment.
          format: int32
          type: integer
        created_at:
          description: Timestamp when the review was created.
          format: date-time
          type: string
        ending_srs_stage:
          description: |
            The SRS stage interval calculated from the number of correct and
            incorrect answers, with valid values ranging from `1` to `9`.
          format: int32
          maximum: 9
          minimum: 1
          type: integer
        incorrect_meaning_answers:
          description: |
            The number of times the user has answered the meaning incorrectly.
          format: int32
          type: integer
        incorrect_reading_answers:
          description: |
            The number of times the user has answered the reading incorrectly.
          format: int32
          type: integer
        spaced_repetition_system_id:
          description: |
            Unique identifier of the associated spaced_repetition_system.
          format: int32
          type: integer
        starting_srs_stage:
          description: |
            The starting SRS stage interval, with valid values ranging from `1`
            to `8`.
          format: int32
          maximum: 8
          minimum: 1
          type: integer
        subject_id:
          description: Unique identifier of the associated subject.
          format: int32
          type: integer
      type: object
    reviewCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/reviewResource'
              type: array
    reviewCreateRequest:
      properties:
        review:
          properties:
            assignment_id:
              description: |
                Unique identifier of the assignment. This or `subject_id` must
                be set.
              format: int32
              type: integer
            created_at:
              description: |
                Timestamp when the review was completed. Defaults to the time of
                the request if omitted from the request body. Must be in the
                past, but after `assignment.available_at`.
              format: date-time
              type: string
            incorrect_meaning_answers:
              description: |
                Must be zero or a positive number. This is the number of times
                the meaning was answered **incorrectly**.
              format: int32
              type: integer
            incorrect_reading_answers:
              description: |
                Must be zero or a positive number. This is the number of times
                the reading was answered **incorrectly**.
                Note that subjects with a type of `radical` do not quiz on
                readings. Thus, set this value to 0.
              format: int32
              type: integer
            subject_id:
              description: |
                Unique identifier of the subject. This or `assignment_id` must
                be set.
              format: int32
              type: integer
          required:
            - assignment_id
            - subject_id
            - incorrect_meaning_answers
            - incorrect_reading_answers
          type: object
      required:
        - review
      type: object
    reviewCreateResponse:
      allOf:
        - $ref: '#/components/schemas/reviewResource'
        - properties:
            resources_updated:
              properties:
                assignment:
                  $ref: '#/components/schemas/assignmentResource'
                review_statistic:
                  $ref: '#/components/schemas/reviewStatisticResource'
              type: object
    reviewResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/review'
    reviewStatistic:
      properties:
        created_at:
          description: Timestamp when the review statistic was created.
          format: date-time
          type: string
        hidden:
          description: |
            Indicates if the associated subject has been hidden, preventing it
            from appearing in lessons or reviews.
          type: boolean
        meaning_correct:
          description: |
            Total number of correct answers submitted for the meaning of the
            associated subject.
          format: int32
          type: integer
        meaning_current_streak:
          description: |
            The current, uninterrupted series of correct answers given for the
            meaning of the associated subject.
          format: int32
          type: integer
        meaning_incorrect:
          description: |
            Total number of incorrect answers submitted for the meaning of the
            associated subject.
          format: int32
          type: integer
        meaning_max_streak:
          description: |
            The longest, uninterrupted series of correct answers ever given for
            the meaning of the associated subject.
          format: int32
          type: integer
        percentage_correct:
          description: |
            The overall correct answer rate by the user for the subject,
            including both meaning and reading.
          format: int32
          type: integer
        reading_correct:
          description: |
            Total number of correct answers submitted for the reading of the
            associated subject.
          format: int32
          type: integer
        reading_current_streak:
          description: |
            The current, uninterrupted series of correct answers given for the
            reading of the associated subject.
          format: int32
          type: integer
        reading_incorrect:
          description: |
            Total number of incorrect answers submitted for the reading of the
            associated subject.
          format: int32
          type: integer
        reading_max_streak:
          description: |
            The longest, uninterrupted series of correct answers ever given for
            the reading of the associated subject.
          format: int32
          type: integer
        subject_id:
          description: Unique identifier of the associated subject.
          format: int32
          type: integer
        subject_type:
          $ref: '#/components/schemas/subjectType'
      type: object
    reviewStatisticCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/reviewStatisticResource'
              type: array
    reviewStatisticResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/reviewStatistic'
    spacedRepetitionSystem:
      properties:
        burning_stage_position:
          description: |
            `position` of the burning stage.
          format: int32
          type: integer
        created_at:
          description: Timestamp when the spaced_repetition_system was created.
          format: date-time
          type: string
        description:
          description: Details about the spaced repetition system.
          type: string
        name:
          description: The name of the spaced repetition system.
          type: string
        passing_stage_position:
          description: |
            `position` of the passing stage.
          format: int32
          type: integer
        stages:
          properties:
            interval:
              description: |
                The length of time added to the time of review registration,
                adjusted to the beginning of the hour.
              format: int32
              nullable: true
              type: integer
            interval_unit:
              description: |
                Unit of time. Can be the following: milliseconds, seconds,
                minutes, hours, days, and weeks.
              enum:
                - milliseconds
                - seconds
                - minutes
                - hours
                - days
                - weeks
              nullable: true
              type: string
            position:
              description: |
                The position of the stage within the continuous order.
              format: int32
              type: integer
          type: object
        starting_stage_position:
          description: |
            position of the starting stage.
          format: int32
          type: integer
        unlocking_stage_position:
          description: |
            position of the unlocking stage.
          format: int32
          type: integer
      type: object
    spacedRepetitionSystemCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/spacedRepetitionSystemResource'
              type: array
    spacedRepetitionSystemResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/spacedRepetitionSystem'
    studyMaterial:
      properties:
        created_at:
          description: Timestamp when the study material was created.
          format: date-time
          type: string
        hidden:
          description: |
            Indicates if the associated subject has been hidden, preventing it
            from appearing in lessons or reviews.
          type: boolean
        meaning_note:
          description: |
            Free form note related to the meaning(s) of the associated subject.
          nullable: true
          type: string
        meaning_synonyms:
          description: |
            Synonyms for the meaning of the subject. These are used as
            additional correct answers during reviews.
          items:
            type: string
          type: array
        reading_note:
          description: |
            Free form note related to the reading(s) of the associated subject.
          nullable: true
          type: string
        subject_id:
          description: Unique identifier of the associated subject.
          format: int32
          type: integer
        subject_type:
          $ref: '#/components/schemas/subjectType'
      type: object
    studyMaterialCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/studyMaterialResource'
              type: array
    studyMaterialCreate:
      allOf:
        - $ref: '#/components/schemas/studyMaterialUpdate'
        - properties:
            study_material:
              properties:
                subject_id:
                  description: Unique identifier of the subject.
                  format: int32
                  type: integer
              required:
                - subject_id
    studyMaterialResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/studyMaterial'
    studyMaterialUpdate:
      properties:
        study_material:
          properties:
            meaning_note:
              description: Meaning notes specific for the subject.
              type: string
            meaning_synonyms:
              description: Meaning synonyms for the subject.
              items:
                type: string
              type: array
            reading_note:
              description: Reading notes specific for the subject.
              type: string
          type: object
      type: object
    subjectAuxiliaryMeaning:
      properties:
        meaning:
          description: A singular subject meaning.
          type: string
        type:
          description: |
            Either `whitelist` or `blacklist`. When evaluating user input,
            whitelisted meanings are used to match for correctness. Blacklisted
            meanings are used to match for incorrectness.
          enum:
            - whitelist
            - blacklist
          type: string
      type: object
    subjectCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/subjectResource'
              type: array
    subjectCommon:
      properties:
        auxiliary_meanings:
          description: Collection of auxiliary meanings.
          items:
            $ref: '#/components/schemas/subjectAuxiliaryMeaning'
          type: array
        characters:
          description: |
            The UTF-8 characters for the subject, including kanji and hiragana.
          type: string
        created_at:
          description: Timestamp when the subject was created.
          format: date-time
          type: string
        document_url:
          description: |
            A URL pointing to the page on wanikani.com that provides detailed
            information about this subject.
          format: url
          type: string
        hidden_at:
          description: |
            Timestamp when the subject was hidden, indicating associated
            assignments will no longer appear in lessons or reviews and that the
            subject page is no longer visible on wanikani.com.
          format: date-time
          nullable: true
          type: string
        lesson_position:
          description: |
            The position that the subject appears in lessons. Note that the
            value is scoped to the level of the subject, so there are duplicate
            values across levels.
          format: int32
          type: integer
        level:
          description: The level of the subject, from `1` to `60`.
          format: int32
          maximum: 60
          minimum: 1
          type: integer
        meaning_mnemonic:
          description: The subject's meaning mnemonic.
          type: string
        meanings:
          description: The subject meanings.
          items:
            $ref: '#/components/schemas/subjectMeaning'
          type: array
        slug:
          description: |
            The string that is used when generating the document URL for the
            subject. Radicals use their meaning, downcased. Kanji and vocabulary
            use their characters.
          type: string
        spaced_repitition_system_id:
          description: |
            Unique identifier of the associated spaced_repetition_system.
          format: int32
          type: integer
      type: object
    subjectContextSentence:
      properties:
        en:
          description: English translation of the sentence
          type: string
        ja:
          description: Japanese context sentence
          type: string
      type: object
    subjectImage:
      properties:
        content_type:
          description: |
            The content type of the image. Currently the API delivers
            `image/png` and `image/svg+xml`.
          enum:
            - image/png
            - image/svg+xml
          type: string
        metadata:
          oneOf:
            - $ref: '#/components/schemas/subjectMetadataSvg'
            - $ref: '#/components/schemas/subjectMetadataPng'
        url:
          description: The location of the image.
          format: url
          type: string
      type: object
    subjectKanji:
      allOf:
        - $ref: '#/components/schemas/subjectCommon'
        - properties:
            amalgamation_subject_ids:
              description: |
                An array of numeric identifiers for the vocabulary that have the
                kanji as a component.
              items:
                format: int32
                type: integer
              type: array
            component_subject_ids:
              description: |
                An array of numeric identifiers for the radicals that make up
                this kanji. Note that these are the subjects that must have
                passed assignments in order to unlock this subject's assignment.
              items:
                format: int32
                type: integer
              type: array
            meaning_hint:
              description: Meaning hint for the kanji.
              nullable: true
              type: string
            reading_hint:
              description: Reading hint for the kanji.
              nullable: true
              type: string
            reading_mnemonic:
              description: The kanji's reading mnemonic.
              type: string
            readings:
              description: Selected readings for the kanji.
              items:
                $ref: '#/components/schemas/subjectReadingKanji'
              type: array
            visually_similar_subject_ids:
              description: |
                An array of numeric identifiers for kanji which are visually
                similar to the kanji in question.
              items:
                format: int32
                type: integer
              type: array
    subjectMeaning:
      properties:
        accepted_answer:
          description: |
            Indicates if the meaning is used to evaluate user input for
            correctness.
          type: boolean
        meaning:
          description: A singular subject meaning.
          type: string
        primary:
          description: Indicates priority in the WaniKani system.
          type: boolean
      type: object
    subjectMetadataPng:
      properties:
        color:
          description: Color of the asset in hexadecimal.
          pattern: ^#[0-9A-F]{6}$
          type: string
        dimensions:
          description: Dimension of the asset in pixels.
          pattern: ^\d+x\d+$
          type: string
        style_name:
          description: A name descriptor.
          type: string
      type: object
    subjectMetadataSvg:
      properties:
        inline_styles:
          description: The SVG asset contains built-in CSS styling.
          type: boolean
      type: object
    subjectPronunciation:
      properties:
        content_type:
          description: |
            The content type of the audio. Currently the API delivers
            `audio/mpeg` and `audio/ogg`.
          enum:
            - audio/mpeg
            - audio/ogg
          type: string
        metadata:
          $ref: '#/components/schemas/subjectPronunciationMetadata'
        url:
          description: The location of the audio.
          format: url
          type: string
      type: object
    subjectPronunciationMetadata:
      description: Details about the pronunciation audio.
      properties:
        gender:
          description: The gender of the voice actor.
          type: string
        pronunciation:
          description: Vocabulary being pronounced in kana.
          type: string
        source_id:
          description: |
            A unique ID shared between same source pronunciation audio.
          format: int32
          type: integer
        voice_actor_id:
          description: A unique ID belonging to the voice actor.
          format: int32
          type: integer
        voice_actor_name:
          description: Humanized name of the voice actor.
          type: string
        voice_description:
          description: Description of the voice.
          type: string
      type: object
    subjectRadical:
      allOf:
        - $ref: '#/components/schemas/subjectCommon'
        - properties:
            amalgamation_subject_ids:
              description: |
                An array of numeric identifiers for the kanji that have the
                radical as a component.
              items:
                format: int32
                type: integer
              type: array
            character_images:
              description: A collection of images of the radical.
              items:
                $ref: '#/components/schemas/subjectImage'
              type: array
            characters:
              description: |
                Unlike kanji and vocabulary, radicals can have a null value for
                `characters`. Not all radicals have a UTF entry, so the radical
                must be visually represented with an image instead.
              nullable: true
    subjectReading:
      properties:
        accepted_answer:
          description: |
            Indicates if the reading is used to evaluate user input for
            correctness.
          type: boolean
        primary:
          description: Indicates priority in the WaniKani system.
          type: boolean
        reading:
          description: A singular subject reading.
          type: string
      type: object
    subjectReadingKanji:
      allOf:
        - $ref: '#/components/schemas/subjectReading'
        - properties:
            type:
              description: |
                The kanji reading's classfication: `kunyomi`, `nanori`, or
                `onyomi`.
              enum:
                - kunyomi
                - nanori
                - onyomi
              type: string
    subjectResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              oneOf:
                - $ref: '#/components/schemas/subjectRadical'
                - $ref: '#/components/schemas/subjectKanji'
                - $ref: '#/components/schemas/subjectVocabulary'
    subjectType:
      description: |
        The type of the associated subject, one of: kanji, radical, or
        vocabulary.
      enum:
        - kanji
        - radical
        - vocabulary
      type: string
    subjectVocabulary:
      allOf:
        - $ref: '#/components/schemas/subjectCommon'
        - properties:
            component_subject_ids:
              description: |
                An array of numeric identifiers for the kanji that make up this
                vocabulary. Note that these are the subjects that must be have
                passed assignments in order to unlock this subject's assignment.
              items:
                format: int32
                type: integer
              type: array
            context_sentences:
              description: A collection of context sentences.
              items:
                $ref: '#/components/schemas/subjectContextSentence'
              type: array
            meaning_mnemonic:
              description: The subject's meaning mnemonic.
              type: string
            parts_of_speech:
              description: Parts of speech.
              items:
                type: string
              type: array
            pronunciation_audios:
              description: A collection of pronunciation audio.
              items:
                $ref: '#/components/schemas/subjectPronunciation'
              type: array
            reading_mnemonic:
              description: The subject's reading mnemonic.
              type: string
            readings:
              description: Selected readings for the vocabulary.
              items:
                $ref: '#/components/schemas/subjectReading'
              type: array
    summary:
      properties:
        lessons:
          description: Details about subjects available for lessons.
          items:
            $ref: '#/components/schemas/summaryLesson'
          type: array
        next_reviews_at:
          description: |
            Earliest date when the reviews are available. Is `null` when the
            user has no reviews scheduled.
          format: date-time
          nullable: true
          type: string
        reviews:
          description: |
            Details about subjects available for reviews now and in the next 24
            hours by the hour (total of 25 objects).
          items:
            $ref: '#/components/schemas/summaryReview'
          type: array
      type: object
    summaryLesson:
      properties:
        available_at:
          description: |
            When the paired `subject_ids` are available for lessons. Always
            beginning of the current hour when the API endpoint is accessed.
          format: date-time
          type: string
        subject_ids:
          description: Collection of unique identifiers for subjects.
          items:
            format: int32
            type: integer
          type: array
      type: object
    summaryReport:
      allOf:
        - $ref: '#/components/schemas/report'
        - properties:
            data:
              $ref: '#/components/schemas/summary'
    summaryReview:
      allOf:
        - $ref: '#/components/schemas/summaryLesson'
        - properties:
            available_at:
              description: |
                When the paired `subject_ids` are available for reviews. All
                timestamps are the top of an hour.
    user:
      properties:
        current_vacation_started_at:
          description: |
            If the user is on vacation, this will be the timestamp of when that
            vacation started. If the user is not on vacation, this is `null`.
          format: date-time
          nullable: true
          type: string
        level:
          description: |
            The current level of the user. This ignores subscription status.
          format: int32
          type: integer
        preferences:
          $ref: '#/components/schemas/userPreferences'
        profile_url:
          description: The URL to the user's public facing profile page.
          format: url
          type: string
        started_at:
          description: The signup date for the user.
          format: date-time
          type: string
        subscription:
          $ref: '#/components/schemas/userSubscription'
        username:
          description: The user's username.
          type: string
      type: object
    userPreferences:
      description: User settings specific to the WaniKani application.
      properties:
        default_voice_actor_id:
          description: |
            The voice actor to be used for lessons and reviews. The value is
            associated to
            `subject.pronunciation_audios.metadata.voice_actor_id`.
          format: int32
          type: integer
        lessons_autoplay_audio:
          description: |
            Automatically play pronunciation audio for vocabulary during
            lessons.
          type: boolean
        lessons_batch_size:
          description: |
            Number of subjects introduced to the user during lessons before
            quizzing.
          format: int32
          type: integer
        lessons_presentation_order:
          description: |
            The order in which lessons are presented. The options are
            `ascending_level_then_subject`, `shuffled`, and
            `ascending_level_then_shuffled`. The default (and best experience)
            is `ascending_level_then_subject`.
          enum:
            - ascending_level_then_subject
            - shuffled
            - ascending_level_then_shuffled
          type: string
        reviews_autoplay_audio:
          description: |
            Automatically play pronunciation audio for vocabulary during
            reviews.
          type: boolean
        reviews_display_srs_indicator:
          description: |
            Toggle for display SRS change indicator after a subject has been
            completely answered during review.
          type: boolean
      type: object
    userReport:
      allOf:
        - $ref: '#/components/schemas/report'
        - properties:
            data:
              $ref: '#/components/schemas/user'
    userSubscription:
      description: Details about the user's subscription state.
      properties:
        active:
          description: |
            Whether or not the user currently has a paid subscription.
          type: boolean
        max_level_granted:
          description: |
            The maximum level of content accessible to the user for lessons,
            reviews, and content review. For unsubscribed/free users, the
            maximum level is `3`. For subscribed users, this is `60`.
            **Any application that uses data from the WaniKani API must respect
            these access limits**.
          enum:
            - 3
            - 60
          format: int32
          type: integer
        period_ends_at:
          description: |
            The date when the user's subscription period ends. If the user has
            subscription type `lifetime` or `free` then the value is `null`.
          format: date-time
          nullable: true
          type: string
        type:
          description: |
            The type of subscription the user has. Options are following:
              `free`, `recurring`, and `lifetime`.
          enum:
            - free
            - recurring
            - lifetime
          type: string
      type: object
    userUpdate:
      properties:
        user:
          properties:
            preferences:
              $ref: '#/components/schemas/userPreferences'
          type: object
      type: object
    voiceActor:
      properties:
        description:
          description: Details about the voice actor.
          type: string
        gender:
          description: |
            `male` or `female`
          enum:
            - male
            - female
          type: string
        name:
          description: The voice actor's name
          type: string
      type: object
    voiceActorCollection:
      allOf:
        - $ref: '#/components/schemas/collection'
        - properties:
            data:
              items:
                $ref: '#/components/schemas/voiceActorResource'
              type: array
    voiceActorResource:
      allOf:
        - $ref: '#/components/schemas/resource'
        - properties:
            data:
              $ref: '#/components/schemas/voiceActor'
  securitySchemes:
    apiKey:
      bearerFormat: v2 API key
      scheme: bearer
      type: http
      description: |
        WaniKani uses your secret API token to authenticate requests to the API.
        You can obtain and manage your v2 token in
        [Settings / API Tokens](https://www.wanikani.com/settings/personal_access_tokens)
        on WaniKani. The token **has** to be included with every request, and
        should be delivered in a HTTP header that looks like:

        `Authorization: Bearer <api_token_here>`

        Also note that all requests must be made over HTTPS. Any requests made
        over HTTP or without authentication headers will fail.
